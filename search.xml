<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工具链/Nginx</title>
    <url>/blog/2020/04/29/%E5%B7%A5%E5%85%B7%E9%93%BE/Nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Nginx源码安装配置"><a href="#Nginx源码安装配置" class="headerlink" title="Nginx源码安装配置"></a>Nginx源码安装配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装make</span></span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装g++</span></span><br><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure>
<p>先装pcre, zlib，前者为了重写rewrite，后者为了gzip压缩。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget p://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.43.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf pcre-8.37.tar.gz</span><br><span class="line">cd pcre-8.43</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line"> </span><br><span class="line">wget https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget [root@master zlib-1.2.11]# wget http://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br><span class="line">cd nginx-1.14.2</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx --conf-path=/etc/nginx</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>启动NGINX</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure>

<h4 id="yum安装Nginx"><a href="#yum安装Nginx" class="headerlink" title="yum安装Nginx"></a>yum安装Nginx</h4><p>参考NGINX cookbook</p>
<ol>
<li><p>create a file named /etc/yum.repos.d/nginx.repo that contains thefollowing contents:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name&#x3D;nginx repo</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;mainline&#x2F;OS&#x2F;OSRELEASE&#x2F;$basearch&#x2F;</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Alter the file, replacing OS at the end of the URL with rhel or centos, depending on your distribution. Replace OSRELEASE with 6 or 7for version 6.x or 7.x, respectively.</strong> eg:<code>baseurl=http://nginx.org/packages/mainline/centos/7/$basearch/</code></p>
</li>
<li><p>Then, run the followingcommands:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br><span class="line">systemctl enable nginx</span><br><span class="line"></span><br><span class="line">systemctl start nginx</span><br><span class="line">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Nginx-文件结构"><a href="#Nginx-文件结构" class="headerlink" title="Nginx 文件结构"></a>Nginx 文件结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx --主配置文件目录</span><br><span class="line">|-- conf.d</span><br><span class="line">|   &#96;-- default.conf</span><br><span class="line">|-- fastcgi_params</span><br><span class="line">|-- koi-utf</span><br><span class="line">|-- koi-win</span><br><span class="line">|-- mime.types</span><br><span class="line">|-- modules -&gt; ..&#x2F;..&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules</span><br><span class="line">|-- nginx.conf -- 配置文件入口</span><br><span class="line">|-- scgi_params</span><br><span class="line">|-- uwsgi_params</span><br><span class="line">&#96;-- win-utf</span><br></pre></td></tr></table></figure>

<p><em>/etc/nginx/</em></p>
<p>​        The <em>/etc/nginx</em>  directory is the default  configuratio root forthe <strong>NGINX</strong> server</p>
<p><em>/etc/nginx/nginx.conf</em></p>
<p>​        The  <em>/etc/nginx/nginx.conf</em> file is the default configuration entry point used by the  <strong>NGINX</strong>  service</p>
<p><em>/etc/nginx/conf.d/</em><br>        The  <em>/etc/nginx/conf.d/</em> directory contains the default HTTPserver configuration file.</p>
<p><em>/var/log/nginx/</em><br>The  <em>/var/log/nginx/</em>  directory is the default log location for <strong>NGINX</strong>  . Within this directory you will find an access.log file and an error.log file.</p>
<h4 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h4><p><code>nginx -h</code>   查看帮助菜单</p>
<p><code>nginx  -v</code>   查看版本</p>
<p><code>nginx  -V</code>  version, build information, and configuration arguments, which shows the modules built in to the NGINX binary. </p>
<p><code>nginx -t</code> 测试配置文件</p>
<p><code>ngix -T</code>  测试并输出配置文件</p>
<p><code>nginx -s signal</code><br>The -s flag sends a signal to the NGINX master process. You can send signals such as <code>stop, quit, reload, and reopen</code>. The stop signal discontinues the NGINX process immediately. The quit signal stops the NGINX process after it finishes processing inflight requests.<strong>The reload signal reloads the configuration</strong>.The reopen signal instructs NGINX to reopen log files.</p>
<h4 id="Nginx-静态资源目录"><a href="#Nginx-静态资源目录" class="headerlink" title="Nginx 静态资源目录"></a>Nginx 静态资源目录</h4><p><em>/ect/nginx/conf.d/</em> 目录中的默认配置文件<em>default.conf</em> </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">server_name</span> www.example.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="comment"># alias /usr/share/nginx/html;</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>note 如果配置没有将此上下文定义为default_server, NGINX将只在HTTP Host header与server_name指令提供的值匹配时才将请求定向到该服务器。location后面设置映射的路径，可以使用正则过滤URL。当查找被请求的文件时，<strong>请求的URI被附加到root指令的值</strong>。最后，index指令为NGINX提供了一个默认文件，或者一个要检查的文件列表，以防URI中没有提供进一步的路径。</p>
</blockquote>
]]></content>
      <categories>
        <category>工具链</category>
      </categories>
  </entry>
  <entry>
    <title>vue/vue</title>
    <url>/blog/2020/04/29/vue/vue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在脚本中引用</span></span><br><span class="line">&lt;script src=<span class="string">"./node_modules/vue/dist/vue.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h4><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#id'</span>,<span class="comment">// 视图模板的Id</span></span><br><span class="line">    data:&#123;<span class="comment">// 数据对象</span></span><br><span class="line">  		msg:<span class="string">"hello world"</span>      </span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;</span><br><span class="line">      show:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">                alert(msg+<span class="keyword">this</span>.btnMsg)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Vue实例相当一个ViewAndModle。vm属性访问加<code>$</code>符号：<code>vm.$el</code>,<code>vm.$data</code>,数据访问直接vm.msg</p>
</blockquote>
<h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><h5 id="v-text-和-v-html"><a href="#v-text-和-v-html" class="headerlink" title="v-text 和 v-html"></a>v-text 和 v-html</h5><ul>
<li><p><code></code> : 绑定数据,只会替换自己的占位符，会转义输出 </p>
</li>
<li><p><code>v-text = “msg”</code>: 绑定数据,会覆盖标签里面的内容，,会输出标签</p>
</li>
<li><p><code>v-html = &quot;msg&quot;</code>：会解析html标签</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">     &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>v-bind是vue中用于绑定<code>属性</code>的指令，单向绑定</p>
<p><code>v-bind:attribute=&#39;expr&#39;</code>可以简写为<code>:attribute=&#39;expr&#39;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind 会把mytitle当成表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-bind:title</span>=<span class="string">'mytitle+"hello word" '</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            mytitle:<span class="string">'this is a title'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-on和事件修饰符"><a href="#v-on和事件修饰符" class="headerlink" title="v-on和事件修饰符"></a>v-on和事件修饰符</h5><p>v-on是vue中用来绑定事件的指令</p>
<p><code>v-on:event=&#39;method(param)&#39;</code>可以简写为<code>@evnet=&#39;method(param)&#39;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">:value</span>=<span class="string">'btnMsg'</span> <span class="attr">v-on:click</span>=<span class="string">'show("hello word")'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'btn'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            btnMsg:<span class="string">'button'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            show:<span class="function"><span class="keyword">function</span><span class="params">(msg)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(msg+<span class="keyword">this</span>.btnMsg)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue事件修饰符：</p>
<ul>
<li>event.stop 停止向上冒泡</li>
<li>event.prevent 阻值默认行为</li>
<li>event.catpure 实现捕获触发事件的机制(相对于冒泡触发)</li>
<li>event.self 只有点击单前元素才会触发事件,不会阻止冒泡行为</li>
<li>event.once 只触发一次函数</li>
</ul>
<blockquote>
<p>事件修饰符可以串联,eg.evnet.self.once</p>
</blockquote>
<h5 id="跑马灯实例"><a href="#跑马灯实例" class="headerlink" title="跑马灯实例"></a>跑马灯实例</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">:value</span>=<span class="string">"start"</span> @<span class="attr">click</span>=<span class="string">'s'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">:value</span>=<span class="string">"stop"</span> @<span class="attr">click</span>=<span class="string">'sp'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            start:<span class="string">'开始'</span>,</span></span><br><span class="line"><span class="actionscript">            stop:<span class="string">'结束'</span>,</span></span><br><span class="line"><span class="actionscript">            msg:<span class="string">'浪哩个啦浪哩个啦'</span>,</span></span><br><span class="line"><span class="actionscript">            intervalId:<span class="literal">null</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            s()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.intervalId=setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.msg = <span class="keyword">this</span>.msg.substring(<span class="number">1</span>)+<span class="keyword">this</span>.msg.substring(<span class="number">0</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg)</span></span><br><span class="line">                &#125;,500)</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            sp()&#123;</span><br><span class="line"><span class="actionscript">                clearInterval(<span class="keyword">this</span>.intervalId)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-model双向数据绑定"><a href="#v-model双向数据绑定" class="headerlink" title="v-model双向数据绑定"></a>v-model双向数据绑定</h5><p>v-model 只能用于表单元素中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model:value</span> = <span class="string">"msg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"msg"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h5><ol>
<li><code>&lt;h v-for=&quot;item in list&quot;&gt;&lt;/h&gt;</code></li>
<li>使用索引，第二个参数为索引<code>&lt;h v-for=&quot;(item,i) in list&quot;&gt;--&lt;/h&gt;</code></li>
<li>遍历对象(值，键，索引)，<code>v-for=&quot;(val,key,index) in user&quot;</code></li>
<li>遍历数值 ，<code>v-for =&quot;i in 10&quot;</code> 从1开始</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el:<span class="string">'#app'</span>,</span></span><br><span class="line">       data:&#123;</span><br><span class="line">        list:[1,2,4,5,6]</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用：key=””,使选项唯一，保持对应关系，key为string/int</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-timeline-item</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-for</span>=<span class="string">"item in this.$store.getters.records"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"list-item"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:timestamp</span>=<span class="string">"item.modifiedTime"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placement</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h5><p>v-if每次都删除创建元素，v-show没有切换display</p>
<h4 id="在vue中使用样式-class四种"><a href="#在vue中使用样式-class四种" class="headerlink" title="在vue中使用样式-class四种"></a>在vue中使用样式-class四种</h4><ul>
<li>用v-bind绑定时，直接传递一个数组，<code>&lt;div id=&quot;app&quot; :class=&quot;[&#39;italic&#39;,&#39;red&#39;,&#39;thin&#39;]&quot;&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span>&#123;</span></span><br><span class="line">        color: red</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.italic</span>&#123;</span></span><br><span class="line">        font-style: italic</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.thin</span>&#123;</span></span><br><span class="line">        font-size: 200pt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">:class</span>=<span class="string">"['italic','red','thin']"</span>&gt;</span></span><br><span class="line">     &#123;&#123;msg&#125;&#125;</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model:value</span> = <span class="string">"msg"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在数组中使用三元表达式 <code>&lt;div id=&quot;app&quot; :class=&quot;[&#39;italic,flag?&#39;thin&#39;:&#39;red&#39;]&quot;&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> `<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">:class</span>=<span class="string">"['italic,flag?'thin':'red']"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el:<span class="string">'#app'</span>,</span></span><br><span class="line">       data:&#123;</span><br><span class="line"><span class="actionscript">           msg:<span class="string">"hhahahah"</span>,</span></span><br><span class="line"><span class="actionscript">           flag:<span class="literal">false</span></span></span><br><span class="line">       &#125;,</span><br><span class="line"><span class="actionscript">       methods:<span class="literal">null</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在数组中使用对象代替三元值<code>&lt;div id=&quot;app&quot; :class=&quot;[&#39;italic,{&#39;red&#39;:falg}]&quot;&gt;</code> </p>
</li>
<li><p>直接使用对象<code>&lt;div id=&quot;app&quot; :class=&quot;{red:true,italic:true,thin:true}&quot;&gt;</code></p>
<p>或<code>&lt;div id=&quot;app&quot; :class=&quot;classObject&quot;&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el:<span class="string">'#app'</span>,</span></span><br><span class="line">       data:&#123;</span><br><span class="line"><span class="actionscript">           msg:<span class="string">"hhahahah"</span>,</span></span><br><span class="line"><span class="actionscript">           flag:<span class="literal">true</span>,</span></span><br><span class="line">           classObject:&#123;</span><br><span class="line"><span class="actionscript">               red:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">               italic:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">               thin:<span class="literal">true</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line"><span class="actionscript">       methods:<span class="literal">null</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>在vue中使用内联样式-style四种</p>
<ul>
<li><p>直接在元素上使用:style=”object”</p>
<p><code>&lt;div id=&quot;app&quot; :style=&quot;{color:&#39;red&#39;,&#39;font-style&#39;:&#39;italic&#39;}&quot;&gt;</code></p>
</li>
<li><p>使用数组引用多个对象 <code>&lt;div id=&quot;app&quot; :style=&quot;[classObject1,classObject2]&quot;&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">:style</span>=<span class="string">"[classObject1,classObject2]"</span>&gt;</span> </span><br><span class="line">var vue = new Vue(&#123;</span><br><span class="line">       el:'#app',</span><br><span class="line">       data:&#123;</span><br><span class="line">           msg:"hhahahah",</span><br><span class="line">           flag:true,</span><br><span class="line">           classObject1:&#123;</span><br><span class="line">               color:'red'</span><br><span class="line">           &#125;,</span><br><span class="line">           classObject2:&#123;</span><br><span class="line">               'font-style':'italic'</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in mustaches --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- in v-bind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义全局过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>过滤器可以接收多个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | capitalize(<span class="string">'arg1'</span>,<span class="string">'arg2'</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value,arg1,agr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h4><p>vue-resource依赖vue,实现<code>get</code>,<code>post</code> ,<code>jsonp</code>请求</p>
<p>安装<code>cnpm i vue-resource</code></p>
<h4 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h4><p>组件是ui界面角度,模块是代码角度，将某个功能模块定义成组件，要那部分功能就使用那部分组件。<strong>组件是可复用的 Vue 实例</strong>。通过<code>&lt;组件名&gt;&lt;/组件名&gt;</code>使用组件。</p>
<p><img src="https://cn.vuejs.org/images/components.png" alt="组件树"></p>
<blockquote>
<p><code>new Vue(options)</code>就是个根节点，<code>options</code>就是组件</p>
</blockquote>
<p>生命周期：</p>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt></p>
<h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><hr>
<h5 id="创建方式1-Vue-extend"><a href="#创建方式1-Vue-extend" class="headerlink" title="创建方式1-Vue.extend()"></a>创建方式1-Vue.extend()</h5><p>使用Vue.extend创建全局的组件对象，<code>Vue.component()</code>注册全局组件，在全局可用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.1定义使用Vue.extend定义一个组件</span></span><br><span class="line"><span class="keyword">var</span> comp = Vue.extend(&#123;</span><br><span class="line">   		<span class="comment">// 组件中包含模板元素,template</span></span><br><span class="line">      template:<span class="string">'&lt;h1&gt;hello world&lt;/h1&gt;'</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 1.2注册组件</span></span><br><span class="line">    Vue.component(<span class="string">'myComp'</span>,comp);</span><br><span class="line">    <span class="keyword">var</span> v =<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span><span class="comment">// 只有实例化vue对象控制的元素才能引用组件</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有实例化vue对象后才能引用组件，在使用Vue.component定义组件时，组件名使用驼峰命名，引用组件时要用<code>-</code>连接</p>
</blockquote>
<h5 id="创建方式2"><a href="#创建方式2" class="headerlink" title="创建方式2"></a>创建方式2</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">'myComp'</span>,&#123;</span><br><span class="line">        template:<span class="string">'&lt;h1&gt;hello word&lt;/h2&gt;'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> v =<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#app'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>组件模板<code>template</code>只能包含一个根元素</p>
</blockquote>
<h5 id="创建方式3"><a href="#创建方式3" class="headerlink" title="创建方式3"></a>创建方式3</h5><p>在被控制的元素的外部使用<code>template</code>元素定义模板，通过id引用模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"templ"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            hahhahaha</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'myComp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#templ'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> v =<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">''</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    componens:&#123;<span class="comment">//定义实例内部组件用componets属性</span></span><br><span class="line">        login:&#123;<span class="comment">//组件名</span></span><br><span class="line">            template:<span class="string">''</span>,</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="组件对象的属性"><a href="#组件对象的属性" class="headerlink" title="组件对象的属性"></a>组件对象的属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	template:<span class="string">''</span>,<span class="comment">//组件中的模板</span></span><br><span class="line">	data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> &#123;&#125; &#125;,<span class="comment">//组件有自己的data,但必须一个函数，并返回数据对象，这样保证使用组件中的data对象都不一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h5><blockquote>
<p>组件中的data必须定义为function,方法必须返回一个对象</p>
</blockquote>
<h5 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h5><ol>
<li>v-if 和v-else切换</li>
<li><code>&lt;component :is=&quot;expr&quot;&gt;&lt;/component&gt;</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue 提供component组件 用来展示对应的模板组件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- component为占位符 :is 属性用来指定要展示的组件名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"'comp1'"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'comp1'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'comp2'</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> v =<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            list:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h5><p>父组件在引用子组件的时候通过属性绑定的方式(v-bind)传值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过v-bind绑定自定义属性pmsg到msg --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自定义属性pmgs在props数组中定义才可以在子组件中使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com1</span> <span class="attr">v-bind:pmsg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">com1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> v =<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">"hello world"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">       components:&#123;</span><br><span class="line">            </span><br><span class="line">           com1:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">               template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>jjjj</span><span class="template-variable">&#123;&#123;pmsg&#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123;cmsg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    需要定义才能使用，只读</span></span></span><br><span class="line"><span class="actionscript">               props:[<span class="string">'pmsg'</span>],</span></span><br><span class="line">               data() &#123;</span><br><span class="line"><span class="actionscript">               <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                   cmsg:<span class="string">"aaaaa"</span></span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件向子组件传递方法</p>
<p>使用事件绑定机制 v-on:func = “parent_function”</p>
<p>子组件 通过this.$emit(‘func’，arg,..)调用父组件的函数</p>
<p>可以通过arg变相传参给子组件</p>
<h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p>前端单页面通过hash(#)来切换页面的方式</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="noopener">安装</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure>

<p><em>如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能：</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span> </span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>  </span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>

<p>使用和创建路由(使用script全局引用则不需Vue.use())</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[<span class="comment">//路由匹配规则</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">redirect</span>:<span class="string">'/login'</span>&#125;,<span class="comment">//重定向</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">'/login'</span>,<span class="attr">component</span>:login&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>component的属性值必须是一个组件模板对象，不能是组件的引用名称,重定向使用<code>redirect</code> </p>
</blockquote>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>创建完路由规则对象后，<code>要注册到vm实例对象</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    router:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注册完路由后，要在对应的元素上放在容器<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;!-- router-view提供的特殊占位符 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span> <span class="attr">tar</span>=<span class="string">"span"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h5><p>1.</p>
<h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p>问题1：资源多，要发起多次请求</p>
<p>问题2：</p>
<blockquote>
<p>webpack能转化一些低级的es6语法，可以使用bable转化更高级的语法</p>
</blockquote>
<h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p>webpack-dev-server生成的bundle.js文件在服务器跟目录，且在内存里，没有生成本地文件<br>常用命令:</p>
<p>webpack-dev-server –open –port 3000  : 启动后自动打开,和设置端口</p>
<p>​                                      –contentBase path :服务器的根路径</p>
<p>​                                      –hot :局部热更新</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack-dev-server --open --port 3000 --contentBase src --hot"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h4><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>webpack默认打包js文件，无法打包非js文件，如果要打包其他文件需要安装第三loader加载器，</p>
<p>如果要打包css要安装<code>style-loader</code>和<code>css-loader</code>，然后在webpack.config.js中新增module节点，module对象上有个rules数组，存放了第三方文件的匹配和处理规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125;<span class="comment">//从后往前调用loader</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片路径使用url-loader,url-loader内部依赖file-loader <code>{test:/\.(jpg|png|jpeg|gif|bmp)/,use:&#39;url-loader?limit=7834&amp;name=[name].[ext]&#39;}</code>如果引用的图片大于<code>limit</code>不会转化为base64(但会重新命名)，如果小于limit会转化为base64；<code>name=[name].[ext]</code>图片名称使用原理的名称。</p>
<h4 id="在webpack-构建的项目中使用Vue进行开发"><a href="#在webpack-构建的项目中使用Vue进行开发" class="headerlink" title="在webpack 构建的项目中使用Vue进行开发"></a>在webpack 构建的项目中使用Vue进行开发</h4><p><img src="/blog/.io//1567162955969.jpg" alt="1567162955969.jpg"></p>
<p><img src="/blog/.io//1567163248833.jpg" alt="1567163248833.jpg"></p>
<p><img src="/blog/.io//1567163386226.jpg" alt="1567163386226.jpg"></p>
<blockquote>
<p>使用import Vue from ‘vue’导入的是 vue.runtime.common.js不是vue.js</p>
</blockquote>
<p>使用<code>import Vue from &#39;../node_modules/vue/dist/vue.js&#39;</code>导入或使用<code>import Vue from &#39;vue&#39;</code>然后在webpack.config.js中添加resolve配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">........</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    alias:&#123;<span class="comment">//修改要导入的vue模块路径</span></span><br><span class="line">      <span class="string">'vue$'</span>:<span class="string">'vue/dist/vue.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<hr>
<p>:moon:在webpack导入.vue模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>默认无法打包vue，需要导入相关loader<code>cnpm i vue-loader vue-template-compiler -D</code></p>
<p><a href="https://vue-loader.vuejs.org/guide/#manual-setup" target="_blank" rel="noopener">https://vue-loader.vuejs.org/guide/#manual-setup</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ... other rules</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// make sure to include the plugin!</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>The plugin is required!</strong> It is responsible for cloning any other rules you have defined and applying them to the corresponding language blocks in <code>.vue</code> files. For example, if you have a rule matching <code>/\.js$/</code>, it will be applied to <code>&lt;script&gt;</code> blocks in <code>.vue</code> files.</p>
</blockquote>
<p>在webpack使用 render进行渲染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'./login.vue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">'this is a msg'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;<span class="comment">// render属性是一个函数，形参可以随便写</span></span><br><span class="line">        <span class="keyword">return</span> r(login)<span class="comment">//返回的值会替换调'#app'这个容器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="export-defalut-和export"><a href="#export-defalut-和export" class="headerlink" title="export defalut 和export"></a>export defalut 和export</h4><ol>
<li>在模块中只允许export defalut 暴露一次</li>
<li>export defalut 暴露的成员可以使用任意变量接收</li>
<li>在一个模块中可以同时使用export default和export</li>
<li>使用export向外暴露的成员只能用<code>{}</code>来接收</li>
</ol>
<h4 id="vue在webpack中使用"><a href="#vue在webpack中使用" class="headerlink" title="vue在webpack中使用"></a>vue在webpack中使用</h4>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue/Vue核心属性</title>
    <url>/blog/2020/04/29/vue/Vue%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="组件的组成——属性"><a href="#组件的组成——属性" class="headerlink" title="组件的组成——属性"></a>组件的组成——属性</h4><p>子组件默认无法访问到父组件上的数据和方法。</p>
<p>有两种方法传递，分别为静态和动态<code>pros</code></p>
<ul>
<li><p>静态：<component-name propsname="hello world"></component-name></p>
</li>
<li><p>动态：在使用(复用)子组件时，通过<code>v-bind:pmsg</code>=”msg”，向子组件props中定义的<code>pmsg</code>传递父组件<code>data</code>中的<code>msg</code>数据。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[属性]</span><br><span class="line">A1[自定义属性props]--&gt;A11[props中声明的属性]</span><br><span class="line">A2[原生属性attrs]--&gt;A21[默认自动挂载到组件根元素上,inheritAttrs为false关闭挂载]</span><br><span class="line">A3[特殊属性class,style]</span><br><span class="line">A--&gt;A1 </span><br><span class="line">A--&gt;A2</span><br><span class="line">A--&gt;A3</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过v-bind绑定自定义属性pmsg到msg --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自定义属性pmgs在props数组中定义才可以在子组件中使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com1</span> <span class="attr">v-bind:pmsg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">com1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> v =<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">"hello world"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">       components:&#123;</span><br><span class="line">            </span><br><span class="line">           com1:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">               template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>jjjj</span><span class="template-variable">&#123;&#123;pmsg&#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123;cmsg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    需要定义才能使用，只读</span></span></span><br><span class="line"><span class="actionscript">               props:[<span class="string">'pmsg'</span>],</span></span><br><span class="line">               data() &#123;</span><br><span class="line"><span class="actionscript">               <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                   cmsg:<span class="string">"aaaaa"</span></span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>组件中props中定义的属性的数据都是父组件传递过来的，传递过来的数据是只读单向的，自己修改会报错，可以通过调用父组件传递过的函数修改</p>
</blockquote>
<h4 id="组件的组成——事件"><a href="#组件的组成——事件" class="headerlink" title="组件的组成——事件"></a>组件的组成——事件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[事件]--&gt;A1[普通事件包括自定义事件]</span><br><span class="line">A1--&gt;A11[通过this.$emit触发]</span><br><span class="line">A--&gt;A2[修饰符事件]</span><br></pre></td></tr></table></figure>

<p>普通事件通过<code>@chang</code>、<code>@input</code>、<code>@click</code>、<code>@customEvnet</code>绑定事件，通过<code>this.$emit(&#39;EventName&#39;,param...)</code>触发，其中@input是<code>v-on:input</code>的缩写</p>
<h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><blockquote>
<p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 <code>v-slot</code> 指令)。它取代了 <code>slot</code> 和 <code>slot-scope</code> 这两个目前已被废弃但未被移除且仍在<a href="https://cn.vuejs.org/v2/guide/components-slots.html#废弃了的语法" target="_blank" rel="noopener">文档中</a>的特性。新语法的由来可查阅这份 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md" target="_blank" rel="noopener">RFC</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot:slotName</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot:slotName</span>=<span class="string">"pros"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>slotName为插槽的名称，在对应的模板组件中用以下标签来接收</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">v-bind</span>=<span class="string">"&#123; value: 'vue' &#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="状态-data-Vs-属性-props"><a href="#状态-data-Vs-属性-props" class="headerlink" title="状态 data Vs 属性 props"></a>状态 data Vs 属性 props</h4><ul>
<li>状态是组件自身的数据</li>
<li>属性是来自父组件的数据</li>
<li>状态的改变未必会触发 更新</li>
<li>属性的改变未必会触发 更新</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="comment">// this.name没有做响应式</span></span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="comment">// 只在info上做响应式，下面的字段没有做响应式设置</span></span><br><span class="line">     info: &#123;&#125;,</span><br><span class="line">     <span class="comment">// 可以提前声明字段，会做响应式设置</span></span><br><span class="line">     <span class="comment">// info: &#123;</span></span><br><span class="line">     <span class="comment">//   number: undefined</span></span><br><span class="line">     <span class="comment">// &#125;,</span></span><br><span class="line">     list: []</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h4 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h4><p>依赖于固定的数据类型——响应式数据，普通全局属性改变是computed是不会重新计算的</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue/Vue-ssr</title>
    <url>/blog/2020/04/29/vue/Vue-ssr/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Client-side-render"><a href="#Client-side-render" class="headerlink" title="Client side render"></a>Client side render</h4><p>JavaScript 可以动态的生成页面内容，client side render指的就是前端拿到数据后，才用<code>JavaScript</code>动态把内容渲染到网页上。</p>
<h4 id="Server-side-render"><a href="#Server-side-render" class="headerlink" title="Server side render"></a>Server side render</h4><p>如果页面由<code>Javascript</code>动态生成，网页只有经过浏览器加载并执行<code>Javascript</code>，等响应回来之后才能动态产生内容。这样对<code>SEO</code>支持不友好,只能搜索到空荡荡的<code>HTML</code>。不过<code>Google</code>的爬虫支持执行<code>Javascript</code>。<code>Server side render</code>像<code>MVC</code>中页面渲染一样，先渲染好页面，客户端就可以接收到网站的页面。</p>
<h3 id="vue-webpack项目配置"><a href="#vue-webpack项目配置" class="headerlink" title="vue + webpack项目配置"></a>vue + webpack项目配置</h3><h4 id="vue-loager-webpack项目配置"><a href="#vue-loager-webpack项目配置" class="headerlink" title="vue-loager + webpack项目配置"></a>vue-loager + webpack项目配置</h4><ol>
<li><p>创建一个<code>vue-ssr</code>目录作为项目目录</p>
</li>
<li><p>在<code>vue-ssr</code>目录下面使用<code>npm</code>初始化项目</p>
<blockquote>
<p>执行<code>npm init</code>初始化项目后，会在<code>vue-ssr</code>目录项目生成一个<code>package.json</code>文件</p>
</blockquote>
</li>
<li><p>安装<code>webpack，vue，vue-loader,</code></p>
<p>同样在<code>vue-ssr</code>目录下，执行<code>npm i webpack vue vue-loader</code>，运行完后会生成<code>node_modules</code>目录。</p>
<blockquote>
<p>npm WARN <a href="mailto:vue-loader@15.7.2">vue-loader@15.7.2</a> requires a peer of css-loader@* but none is installed. You must install peer dependencies yourself.</p>
<p>执行<code>npm i css-loader  vue-template-compiler</code></p>
</blockquote>
</li>
<li><p>在<code>vue-ssr</code>下面创建<code>src</code>目录用于存放源码</p>
</li>
<li><p>在<code>src</code>目录下面创建<code>app.vue</code>文件，内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">      &#123;&#123;text&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            text:&quot;hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">   </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app&#123;</span><br><span class="line">    color: rgb(255, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>在<code>src</code>目录下面创建<code>webpack.config.js</code>,配置文件如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="number">1.</span> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">//2. 入口文件   </span></span><br><span class="line"> entry:path.join(__dirname,<span class="string">"src/index.js"</span>),</span><br><span class="line"><span class="comment">//2. 出口文件</span></span><br><span class="line"> output:&#123;</span><br><span class="line">     <span class="comment">// 文件名</span></span><br><span class="line">     filename:<span class="string">"bundle.js"</span>,</span><br><span class="line">     <span class="comment">// 文件路径   </span></span><br><span class="line">     path : path.join(__dirname,<span class="string">"dist"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>创建<code>index.js</code>内容如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./app.vue"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root)</span><br><span class="line"><span class="comment">// 将模板挂载到html 元素中</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    render:<span class="function">(<span class="params">h</span>)=&gt;</span>h(App)</span><br><span class="line">&#125;).$mount(root)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>package.json</code>文件中的<code>scripts</code>中添加webpack打包命令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">   "build":"webpack --config webpack.config.js"</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>webpack.config.js</code>,配置文件如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:path.join(__dirname,<span class="string">"src/index.js"</span>),</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">"bundle.js"</span>,</span><br><span class="line">        path : path.join(__dirname,<span class="string">"dist"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">          &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'vue-loader'</span>]&#125;,</span><br><span class="line">          &#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,<span class="attr">use</span>:[<span class="string">'vue-loader'</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置webpack-dev-server</p>
<ul>
<li><p>安装webpack-dev-server <code>npm i webpack-dev-server</code></p>
</li>
<li><p>在<code>package.jons</code>中的<code>scripts</code>中添加<code>webpack-dev-server</code>命令</p>
</li>
<li><p>在<code>webpack.config.js</code>中配置<code>target</code></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target:&quot;web&quot;,</span><br></pre></td></tr></table></figure>

<p>编译为类浏览器环境里可用<strong>（默认）</strong></p>
</blockquote>
</li>
<li><p>添加<code>cross-env</code>实现夸平台设置变量</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "cross-env NODE_ENV=production webpack --config webpack.config.js",</span><br><span class="line">    "dev": "cross-evn NODE_ENV=dev webpack-dev-server --config webpack.config.js"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>这样可以在webpack.config.js接收到NODE_ENV 变量：<code>process.env.NODE_ENV</code></p>
</li>
<li><p>修改<code>webpack.config.js</code>如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    target:<span class="string">"web"</span>,</span><br><span class="line">    entry:path.join(__dirname,<span class="string">"src/index.js"</span>),</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">"bundle.js"</span>,</span><br><span class="line">        path : path.join(__dirname,<span class="string">"dist"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">          &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">loader</span>:<span class="string">"css-loader"</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,<span class="attr">use</span>:[<span class="string">'vue-loader'</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是开发环境会添加devServer属性</span></span><br><span class="line"><span class="keyword">if</span>(isDev)&#123;</span><br><span class="line">    config.devtool:<span class="string">""</span></span><br><span class="line">    config.devServer = &#123;</span><br><span class="line">        port:<span class="string">'80'</span>,</span><br><span class="line">        host:<span class="string">'0.0.0.0'</span>,</span><br><span class="line">        <span class="comment">// 热部署</span></span><br><span class="line">        hot:<span class="literal">true</span>,</span><br><span class="line">        overlay:&#123;</span><br><span class="line">            <span class="comment">// 将编译过程中的错误显示到网页</span></span><br><span class="line">            errors:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用<code>html-webpack-plugin</code>挂载<code>js</code></p>
<p>没有<code>html</code>入口文件是访问不了的,<code>htmlwebpack-plugin</code>会将编译好的bundle.js挂载到<code>index.hmtl</code>(没有就创建)中</p>
<ul>
<li><p>安装<code>npm i html-webpack-plugin</code></p>
</li>
<li><p>在<code>webpack.config.js</code>引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HTMLPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HTMLPlugin(),</span><br><span class="line">        <span class="comment">// 定义全局变量</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>:&#123;</span><br><span class="line">                NODE_ENV: isDev ? <span class="string">'"development"'</span> :<span class="string">'"production"'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue/Vuex</title>
    <url>/blog/2020/04/29/vue/Vuex/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">   mutations: &#123;</span><br><span class="line">    listMemos(state, total) &#123;</span><br><span class="line">      state.memos.total = total;</span><br><span class="line">      <span class="built_in">console</span>.log(total);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>mutations</code>用于修改并跟踪数据的变化，通过<code>store.commit(&#39;mutations&#39;,params)</code>调用</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue/Vue-router</title>
    <url>/blog/2020/04/29/vue/Vue-router/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue/PromiseAndAxiso</title>
    <url>/blog/2020/04/29/vue/PromiseAndAxiso/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">          setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">              <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                  resolve(<span class="string">"hello"</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  reject(<span class="string">"出错了"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">      p.then(<span class="function">(<span class="params">resovle</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(resovle);</span><br><span class="line">      &#125;, (reject) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(reject);</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Promise</code>是一个异步任务结果的容器，<code>new Promise()</code>接收一个<code>function</code>作为回调函数，以执行异步任务。</li>
<li><code>Promise</code>是异步任务的结果容器，异步任务的回调函数有两个<strong>函数形参</strong><code>resolve</code>和<code>reject</code>分别用于处理异步任务的成功或失败结果。</li>
<li><code>Promise.then(function(){},function(){})</code>用于获取执行结果，其中第一个函数用于处理<code>resolve</code>状态的结果，第二个函数用户处理<code>rejected</code>状态的结果。</li>
</ul>
<h4 id="Axiso"><a href="#Axiso" class="headerlink" title="Axiso"></a>Axiso</h4><p>1.form格式，将Content-Type类型设置为application/x-www-form-urlencode，POST请求时将data序列化,提交的数据会按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">headers: &#123;</span><br><span class="line">     "Content-Type": "application/x-www-form-urlencoded; charset=utf-8;"</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>2.json格式，有时候后台需要body传送的是json数据，将Content-Type类型设置为application/json，注意POST请求时data不要序列化</p>
<p><img src="https://pq3kbw.ch.files.1drv.com/y4pVImJLLHaQ8JD4o1jP7Yc6mxfU-vvKh8p2_2ACC4j8bDt6UApX3pffY0su3509SA_3wHbtnvpVLu3se3FBZ8OuWGexflBicIwms6SqNd0hyKXuAuyoMoVGU1yltaOY1TsBNRW0vkT4277bJ_NJvCXtgoZrrb4Krc5plsnAjKmykscEWxWNFPiSXP0aCPfsrrjQoNrLpy627h9ya3XIG_0rBTQrt7XLL08I4Lkny1wGlk" alt></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue/Vue-cli</title>
    <url>/blog/2020/04/29/vue/Vue-cli/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="vue-cli-脚手架工具"><a href="#vue-cli-脚手架工具" class="headerlink" title="vue-cli 脚手架工具"></a>vue-cli 脚手架工具</h1><p>vue-cli 可以做什么(编写好基础代码)：<br>1、目录结构<br>2、本地调试<br>3、代码部署<br>4、热更新<br>5、单元测试 （ESlint）</p>
<h4 id="安装指令"><a href="#安装指令" class="headerlink" title="安装指令"></a>安装指令</h4><p>安装vue-cli：npm install -g vue-cli</p>
<p>查看版本: vue -V</p>
<p>老版初始化项目<code>vue init &lt;template-name&gt; &lt;project-name&gt;</code></p>
<p>example：<code>vue</code> init webpack 项目名<br> 安装依赖：npm install</p>
<blockquote>
<p><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">官网</a>Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：create [options] &lt;app-name&gt;</span><br><span class="line"></span><br><span class="line">创建一个由 &#96;vue-cli-service&#96; 提供支持的新项目</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">  -p, --preset &lt;presetName&gt;       忽略提示符并使用已保存的或远程的预设选项</span><br><span class="line">  -d, --default                   忽略提示符并使用默认预设选项</span><br><span class="line">  -i, --inlinePreset &lt;json&gt;       忽略提示符并使用内联的 JSON 字符串预设选项</span><br><span class="line">  -m, --packageManager &lt;command&gt;  在安装依赖时使用指定的 npm 客户端</span><br><span class="line">  -r, --registry &lt;url&gt;            在安装依赖时使用指定的 npm registry</span><br><span class="line">  -g, --git [message]            * 强制 &#x2F; 跳过 git 初始化，并可选的指定初始化提交信息</span><br><span class="line">  -n, --no-git                   * 跳过 git 初始化</span><br><span class="line">  -f, --force                     覆写目标目录可能存在的配置</span><br><span class="line">  -c, --clone                     使用 git clone 获取远程预设选项</span><br><span class="line">  -x, --proxy                     使用指定的代理创建项目</span><br><span class="line">  -b, --bare                      创建项目时省略默认组件中的新手指导信息</span><br><span class="line">  -h, --help                      输出使用帮助信息</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>入口文件是一个webpack概念；<code>main.js</code><strong>入口文件是webpack构建内部依赖图的起点</strong>。</li>
<li>app.js是由webpack打包生成的<strong>输出文件</strong>。</li>
<li>而将app.js挂载到index.html这一过程是由webpack的一个插件——<strong>html-webpack-plugin</strong>完成的。</li>
<li>vue-cli默认只有一个入口文件，可以快速构建单页面网页</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vue-project</span><br><span class="line"></span><br><span class="line">## Project setup</span><br><span class="line"> </span><br><span class="line">cnpm install</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### Compiles and hot-reloads for development</span><br><span class="line"> </span><br><span class="line">cnpm run serve</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### Compiles and minifies for production</span><br><span class="line"> </span><br><span class="line">cnpm run build</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### Lints and fixes files</span><br><span class="line"> </span><br><span class="line">cnpm run lint</span><br><span class="line"></span><br><span class="line">### Customize configuration</span><br><span class="line">See [Configuration Reference](https:&#x2F;&#x2F;cli.vuejs.org&#x2F;config&#x2F;).</span><br></pre></td></tr></table></figure>

<h4 id="自定义安装"><a href="#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h4><blockquote>
<p> Manually select features，按空格选择，按回车下一步</p>
</blockquote>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTktkqVwb0Xn-oYy/root/content" alt></p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTpv7OT1_GlnwbLz/root/content" alt></p>
<p>路由模型选择history，选y</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgT2WoGJPlibrkdLj/root/content" alt></p>
<p>CSS预处理器选less(ant design使用的是less)</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTxh4z4p90qtwjjR/root/content" alt></p>
<p>ESlint编码规范，这里选择ESLint + Prettier</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgT2WoGJPlibrkdLj/root/content" alt></p>
<p>选择什么时候进行Lint,这里选择Lint and fix on commit</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgT5xfgvaxfANNjeE/root/content" alt></p>
<p>最后选择一个测试方案，Jest</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgT8CO9huaInTcwp8/root/content" alt></p>
<p>选择配置文件单独放一个文件（In dedicated config files）</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgUCi-HMK_1tdS7O4/root/content" alt></p>
<p>是否保存现在的配置为以后的项目使用，Y</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgUG9cmvHd-As7ne_/root/content" alt></p>
<p>选择 NPM管理包</p>
<h4 id="自定义webpack和babel配置"><a href="#自定义webpack和babel配置" class="headerlink" title="自定义webpack和babel配置"></a>自定义webpack和babel配置</h4><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。<a href="https://cli.vuejs.org/zh/config/#vue-config-js" target="_blank" rel="noopener">官方地址</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>spring源码解析/springBoot源码安装</title>
    <url>/blog/2020/04/29/spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/springBoot%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Spring-Boot源码安装"><a href="#Spring-Boot源码安装" class="headerlink" title="Spring Boot源码安装"></a>Spring Boot源码安装</h4><p>spring framework是基于gradle构建的。而spring boot是基于maven构建的</p>
<h4 id="在github上下载源码"><a href="#在github上下载源码" class="headerlink" title="在github上下载源码"></a>在github上下载源码</h4><p>点击branch可以选择分支</p>
<h4 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h4><ul>
<li>进入spring-boot-2.1.x源码根目录</li>
<li>执行mvn命令: <code>mvn clean install -DskipTests -Pfast</code> <em>//跳过测试用例</em></li>
<li>./mvnw clean install -DskipTests -Pfast，这里会下载mavne，不会使用本地maven</li>
</ul>
<blockquote>
<p>最好先编译好在导入，不然idea会执行不必要的测试和命令</p>
</blockquote>
<h4 id="新建一个module"><a href="#新建一个module" class="headerlink" title="新建一个module"></a>新建一个module</h4><p>将项目导入idea后新建一个maven模块</p>
<p>在<code>spring-boot-project</code>新建一个maven项目</p>
<p>pom文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../spring-boot-parent<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-mxdc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxdc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MXDC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/10/28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MxdcApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(MxdcApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring源码解析</category>
      </categories>
  </entry>
  <entry>
    <title>spring源码解析/SpringMvc</title>
    <url>/blog/2020/04/29/spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/SpringMvc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="新建一个gradle模块"><a href="#新建一个gradle模块" class="headerlink" title="新建一个gradle模块"></a>新建一个gradle模块</h4><p>在构建的spring framework项目中新建一个gradle模块。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">'org.springframework'</span></span><br><span class="line">version <span class="string">'5.1.11.BUILD-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.27' </span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.tomcat.embed'</span>, <span class="string">name:</span> <span class="string">'tomcat-embed-core'</span>, <span class="string">version:</span> <span class="string">'8.5.47'</span></span><br><span class="line">    compile project(<span class="string">":spring-webmvc"</span>)</span><br><span class="line">    compile project(<span class="string">":spring-context"</span>)</span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现WebApplicationInitializer"><a href="#实现WebApplicationInitializer" class="headerlink" title="实现WebApplicationInitializer"></a>实现WebApplicationInitializer</h4><p>servlet 3.1规范:</p>
<p><code>ServletContainerInitializer</code>类通过<code>jar services API</code>查找。对于每一个应用，应用启动时，由容器创建一个<code>ServletContainerInitializer</code>实例。框架提供的<code>ServletContainerInitializer</code>实现必须绑定在jar包的META-INF/services目录中的一个叫做<code>javax.servlet.ServletContainerInitializer</code>的文件(在spring framework中的spring web模块中可以找到改文件)，根据jar services API，指定ServletContainerInitializer的实现。</p>
<p><strong>在任何Servlet Listener的事件被触发之前，当应用正在启动时，ServletContainerInitializer的onStartup方法将被调用。</strong></p>
<p><strong>ServletContainerInitializer’s的onStartup得到一个类的set，其或者继承/实现initializer表示感兴趣的类，或者它是使用指定在@HandlesTypes注解中的任意类注解的。</strong>（<code>@HandlesTypes</code>注解的处理，被它标明的类需要作为参数值传入到onStartup方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">oid <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(WebApplicationInitializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Delegate the &#123;<span class="doctag">@code</span> ServletContext&#125; to any &#123;<span class="doctag">@link</span> WebApplicationInitializer&#125;</span></span><br><span class="line"><span class="comment">	 * implementations present on the application classpath.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Because this class declares @&#123;<span class="doctag">@code</span> HandlesTypes(WebApplicationInitializer.class)&#125;,</span></span><br><span class="line"><span class="comment">	 * Servlet 3.0+ containers will automatically scan the classpath for implementations</span></span><br><span class="line"><span class="comment">	 * of Spring's &#123;<span class="doctag">@code</span> WebApplicationInitializer&#125; interface and provide the set of all</span></span><br><span class="line"><span class="comment">	 * such types to the &#123;<span class="doctag">@code</span> webAppInitializerClasses&#125; parameter of this method.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;If no &#123;<span class="doctag">@code</span> WebApplicationInitializer&#125; implementations are found on the classpath,</span></span><br><span class="line"><span class="comment">	 * this method is effectively a no-op. An INFO-level log message will be issued notifying</span></span><br><span class="line"><span class="comment">	 * the user that the &#123;<span class="doctag">@code</span> ServletContainerInitializer&#125; has indeed been invoked but that</span></span><br><span class="line"><span class="comment">	 * no &#123;<span class="doctag">@code</span> WebApplicationInitializer&#125; implementations were found.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Assuming that one or more &#123;<span class="doctag">@code</span> WebApplicationInitializer&#125; types are detected,</span></span><br><span class="line"><span class="comment">	 * they will be instantiated (and &lt;em&gt;sorted&lt;/em&gt; if the @&#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">	 * org.springframework.core.annotation.Order <span class="doctag">@Order</span>&#125; annotation is present or</span></span><br><span class="line"><span class="comment">	 * the &#123;<span class="doctag">@link</span> org.springframework.core.Ordered Ordered&#125; interface has been</span></span><br><span class="line"><span class="comment">	 * implemented). Then the &#123;<span class="doctag">@link</span> WebApplicationInitializer#onStartup(ServletContext)&#125;</span></span><br><span class="line"><span class="comment">	 * method will be invoked on each instance, delegating the &#123;<span class="doctag">@code</span> ServletContext&#125; such</span></span><br><span class="line"><span class="comment">	 * that each instance may register and configure servlets such as Spring's</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@code</span> DispatcherServlet&#125;, listeners such as Spring's &#123;<span class="doctag">@code</span> ContextLoaderListener&#125;,</span></span><br><span class="line"><span class="comment">	 * or any other Servlet API componentry such as filters.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> webAppInitializerClasses all implementations of</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> WebApplicationInitializer&#125; found on the application classpath</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> servletContext the servlet context to be initialized</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> WebApplicationInitializer#onStartup(ServletContext)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> AnnotationAwareOrderComparator</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(@Nullable Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses, ServletContext servletContext)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">		List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (webAppInitializerClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Class&lt;?&gt; waiClass : webAppInitializerClasses) &#123;</span><br><span class="line">				<span class="comment">// Be defensive: Some servlet containers provide us with invalid classes,</span></span><br><span class="line">				<span class="comment">// no matter what @HandlesTypes says...</span></span><br><span class="line">				<span class="keyword">if</span> (!waiClass.isInterface() &amp;&amp; !Modifier.isAbstract(waiClass.getModifiers()) &amp;&amp;</span><br><span class="line">						WebApplicationInitializer<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">waiClass</span>)) </span>&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						initializers.add((WebApplicationInitializer)</span><br><span class="line">								ReflectionUtils.accessibleConstructor(waiClass).newInstance());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Failed to instantiate WebApplicationInitializer class"</span>, ex);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (initializers.isEmpty()) &#123;</span><br><span class="line">			servletContext.log(<span class="string">"No Spring WebApplicationInitializer types detected on classpath"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		servletContext.log(initializers.size() + <span class="string">" Spring WebApplicationInitializers detected on classpath"</span>);</span><br><span class="line">		AnnotationAwareOrderComparator.sort(initializers);</span><br><span class="line">		<span class="keyword">for</span> (WebApplicationInitializer initializer : initializers) &#123;</span><br><span class="line">            <span class="comment">// 这里执行满足@HandlesTypes(WebApplicationInitializer.class)传过来的类</span></span><br><span class="line">			initializer.onStartup(servletContext);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现WebApplicationInitializer由上可知会被调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不会自己调用，给web服务器调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Configure the given &#123;<span class="doctag">@link</span> ServletContext&#125; with any servlets, filters, listeners</span></span><br><span class="line"><span class="comment">	 * context-params and attributes necessary for initializing this web application. See</span></span><br><span class="line"><span class="comment">	 * examples &#123;<span class="doctag">@linkplain</span> WebApplicationInitializer above&#125;.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> servletContext the &#123;<span class="doctag">@code</span> ServletContext&#125; to initialize</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> ServletException if any call against the given &#123;<span class="doctag">@code</span> ServletContext&#125;</span></span><br><span class="line"><span class="comment">	 *                          throws a &#123;<span class="doctag">@code</span> ServletException&#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatContainer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span> <span class="keyword">throws</span> ServletException, LifecycleException</span>&#123;</span><br><span class="line">		Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">		tomcat.setPort(<span class="number">9090</span>);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 *  * <span class="doctag">@param</span> contextPath The context mapping to use, "" for root context.</span></span><br><span class="line"><span class="comment">		 *  * <span class="doctag">@param</span> docBase Base directory for the context, for static files.</span></span><br><span class="line"><span class="comment">		 *  *  Must exist, relative to the server home</span></span><br><span class="line"><span class="comment">		 *  * <span class="doctag">@return</span> the deployed context</span></span><br><span class="line"><span class="comment">		 *   contextPath 是tomcat的访问路径</span></span><br><span class="line"><span class="comment">		 *	tomcat.addWebapp说明是web项目，将查找使用的services API（绑定在jar包中的META-INF/services目录中的一个叫做javax.servlet.ServletContainerInitializer的文件，最终会调用到 WebApplicationInitializer实现类。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		tomcat.addWebapp(<span class="string">"/"</span>,<span class="keyword">new</span> File(System.getProperty(<span class="string">"java.io.tmpdir"</span>)).getAbsolutePath());</span><br><span class="line">		Context rootContext = tomcat.addContext(<span class="string">"/"</span>, <span class="string">""</span>);</span><br><span class="line">		tomcat.start();</span><br><span class="line">		tomcat.getServer().await();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果使用addWebapp()执行完onStartup()后会报错。（addwebapp表示普通web项目,tomcat会找web.xml和解析jps,spring boot又不支持）。没有web.xml找不到servlet.</p>
<p>严重: Servlet [jsp] in web application [] threw load() exception<br>java.lang.ClassNotFoundException: org.apache.jasper.servlet.JspServlet</p>
<p>使用addContext就不会查找WebApplicationInitializer，也不会报错。spring boot的中tomcat的依赖没依赖jsp</p>
</blockquote>
]]></content>
      <categories>
        <category>spring源码解析</category>
      </categories>
  </entry>
  <entry>
    <title>spring源码解析/SpringFramework源码安装</title>
    <url>/blog/2020/04/29/spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/SpringFramework%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="spring-framework下载源码"><a href="#spring-framework下载源码" class="headerlink" title="spring framework下载源码"></a>spring framework下载源码</h4><p>spirng 5.0问题多多搞了一半天没整明天，建议使用5.1和gradle 4.10.3版本，不然问题多多瞎折腾。</p>
<p>在github上搜索spirng 找到 spring framework项目，在分支了可以选择版本。这里下载5.x</p>
<h5 id="可以在spring-gradle中修改maven镜像"><a href="#可以在spring-gradle中修改maven镜像" class="headerlink" title="可以在spring.gradle中修改maven镜像"></a>可以在spring.gradle中修改maven镜像</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//     maven &#123; url "http://maven.aliyun.com/nexus/content/groups/public/"&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="idea编译"><a href="#idea编译" class="headerlink" title="idea编译"></a>idea编译</h4><p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1571971155393.jpg" alt></p>
<p>使用工具编译时，可能会出现内存溢出情况，这里我们编译时需要增加相关参数；<br>-XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m</p>
<blockquote>
<p>如果出现错误，修改build.gradle中的相同提示信息中所要求的版本。或注释掉相关内容。</p>
</blockquote>
<p>构建完成之后，如此依次编译spring-core ,spring-oxm，spring-context，spring-bean即可。</p>
<h4 id="解决编译错误问题一：cglib和objenesis-jar包的缺失"><a href="#解决编译错误问题一：cglib和objenesis-jar包的缺失" class="headerlink" title="解决编译错误问题一：cglib和objenesis jar包的缺失"></a>解决编译错误问题一：cglib和objenesis jar包的缺失</h4><ul>
<li>问题原因：为了避免第三方class的冲突，Spring把最新的cglib和objenesis给重新打包（repack）了。它并没有在源码里提供这部分的代码，而是直接将其放在jar包当中，这也就导致了我们拉取代码后出现编译错误。</li>
<li>问题解决：</li>
</ul>
<p>这是因该会出问题包spring-core中的cglib包找不到的问题，解决办法：执行这2个任务</p>
<p>other-&gt;cglibRepackJar</p>
<p>other-&gt;objenesisRepackJar</p>
<p><img src="https://img2018.cnblogs.com/blog/1016598/201907/1016598-20190706183725521-1159082514.png" alt><br>作者：木兮vtalk链接：<a href="https://juejin.im/post/5d7662a2f265da03af19fabe来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://juejin.im/post/5d7662a2f265da03af19fabe来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>
<p>编译过程中会出现提示错误信息，我们忽略这个信息</p>
<h4 id="AspectJ出错"><a href="#AspectJ出错" class="headerlink" title="AspectJ出错"></a>AspectJ出错</h4>]]></content>
      <categories>
        <category>spring源码解析</category>
      </categories>
  </entry>
  <entry>
    <title>spring源码解析/IOC</title>
    <url>/blog/2020/04/29/spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/IOC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><p>The <code>org.springframework.context.ApplicationContext</code> interface represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the beans. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.   AnnotationConfigApplicationContext</span><br><span class="line"><span class="number">2</span>.   <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line"><span class="number">3</span>.   FileSystemXmlApplicationContext</span><br></pre></td></tr></table></figure>

<p>Within the container itself, these bean definitions are represented as <code>BeanDefinition</code> objects,</p>
<h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><hr>
<h5 id="包扫描-组件注解-Service-Controller-Component-Repository"><a href="#包扫描-组件注解-Service-Controller-Component-Repository" class="headerlink" title="包扫描+组件注解(@Service/@Controller/@Component/@Repository)"></a>包扫描+组件注解(@Service/@Controller/@Component/@Repository)</h5><h5 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h5><h5 id="Conditional按条件注册Bean"><a href="#Conditional按条件注册Bean" class="headerlink" title="@Conditional按条件注册Bean"></a>@Conditional按条件注册Bean</h5><h5 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h5><ul>
<li>@Import</li>
<li>ImportSelector</li>
<li>ImportBeanDefinitionRegistrar</li>
</ul>
<p>FactoryBean</p>
<h4 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h4><p>loadBeanDefinition–new bean– lifecyclecallback- 主动注入 -初始化— —销毁</p>
<ol>
<li><p>加载配置，扫描配置文件</p>
</li>
<li><p>加载bean的元素数据包装成BeanDefinition</p>
</li>
<li><p>执行BeanFactoryPostProcessor</p>
<p>finishBeanFactoryInitialization(),下面是实例化bean</p>
</li>
</ol>
<ol start="4">
<li><p>实例化（Instantiation）</p>
<p>—第一次应用后置处理器。InstantiationAwareBeanPostProcessor$postProcessBeforeInstantiation</p>
<p>—第二次应用后置处理器。InstantiationAwareBeanPostProcessor$postProcessPropertyValues</p>
<p>—利用依赖注入设置属性</p>
<p>— BeanNameAware（作用：<strong>让Bean获取自己在BeanFactory配置中的名字（根据情况是id或者name）。</strong>）</p>
<p>—BeanClassLoaderAware</p>
<p>— BeanFactoryAware（作用：<strong>让Bean获取配置他们的BeanFactory的引用。</strong>）</p>
<p>—-applyBeanPostProcessorsBeforeInitialization</p>
<hr>
<p>—6.初始化(<strong>Lifecyle Callbacks</strong>)（（@PostConstruct先）先调用afterPropertiesSet，在调用自定义初始化方法）</p>
<p>​    |—- Initialization Callbacks</p>
<p>​    |—- Destruction Callbacks</p>
<p>—applyBeanPostProcessorsAfterInitialization</p>
</li>
</ol>
<hr>
<ol>
<li>InstantiationAwareBeanPostProcessor接口继承BeanPostProcessor接口，它内部提供了3个方法，再加上BeanPostProcessor接口内部的2个方法，所以实现这个接口需要实现5个方法。InstantiationAwareBeanPostProcessor接口的主要作用在于目标对象的实例化过程中需要处理的事情，包括实例化对象的前后过程以及实例的属性设置</li>
<li>postProcessBeforeInstantiation方法是最先执行的方法，它在目标对象实例化之前调用，该方法的返回值类型是Object，我们可以返回任何类型的值。由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。如果该方法的返回值代替原本该生成的目标对象，后续只有postProcessAfterInitialization方法会调用，其它方法不再调用；否则按照正常的流程走</li>
<li>postProcessAfterInstantiation方法在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。如果该方法返回false，会忽略属性值的设置；如果返回true，会按照正常流程设置属性值</li>
<li>postProcessPropertyValues方法对属性值进行修改(这个时候属性值还未被设置，但是我们可以修改原本该设置进去的属性值)。如果postProcessAfterInstantiation方法返回false，该方法不会被调用。可以在该方法内对属性值进行修改</li>
</ol>
<hr>
<h5 id="Lifecycle-Callbacks"><a href="#Lifecycle-Callbacks" class="headerlink" title="Lifecycle Callbacks"></a>Lifecycle Callbacks</h5><ul>
<li><strong>Initialization Callbacks</strong>是在执行构造方法之后，<strong>Destruction Callbacks</strong>是销毁之前。有三种方式实现</li>
</ul>
<p>1)指定初始化方法和销毁方法</p>
<p>​    指定init-mtthod和destory-method</p>
<p>​    @Bean(initMethod=”init”,destroyMethod=”destroy”)    </p>
<p>2）让Bean实现InitializingBean,DisposbleBean</p>
<p>2）使用JSR250（用在方法上面）</p>
<p>​    @PostConstruct,在bean创建完成之前并且属性赋值完成，来执行初始化方法</p>
<p>​    @PreDestory，在容器销毁bean之前通知我们进行清理</p>
<ul>
<li><h5 id="Startup-and-Shutdown-Callbacks"><a href="#Startup-and-Shutdown-Callbacks" class="headerlink" title="Startup and Shutdown Callbacks"></a>Startup and Shutdown Callbacks</h5></li>
</ul>
<hr>
<p>BeanFactoryPostProcessor和BeanPostProcessor，这两个接口，都是Spring初始化bean时对外暴露的扩展点。两个接口名称看起来很相似，但作用及使用场景却不同</p>
<h4 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h4><p>是一个接口，加载类后(类信息被抽象在BeanDefinition)还没有实例化。可以在spring的bean创建之前，修改bean的定义属性。</p>
<h4 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">	    .....</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>执行finishBeanFactoryInitialization(beanFactory);</p>
</li>
<li><p>beanFactory.preInstantiateSingletons(),preInstantiateSingletons()是ConfigurableListableBeanFactory一个接口方法。DefaultListableBeanFactory是实现类。</p>
</li>
<li><p>执行perInstantiateSingletons()时先判断<code>if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit())</code>单列、懒加载。如果是则在判断<code>if (isFactoryBean(beanName)){}else{getBean(beanName); }。</code>factoryBean是一个特殊bean。如果不factoryBean是普通bean则调用<code>getBen(beanName)</code>。</p>
</li>
</ol>
<blockquote>
<p>为啥是getBean而不是newBean,createBean?是为了判断是否已经存在bean了，避免重复实例化。</p>
</blockquote>
<ol start="4">
<li>getBean会调用doGetBean,doGetBean()方法里面先执行transformedBeanName()规范beanName。然后第一次调用getSingleton(beanName),<code>private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);</code>就是从<code>singletonObjects</code>中获取bean,它就是个ConcurrentHashMap&lt;&gt;(256)如果没被实例化就会返回null;isSingletonCurrentlyInCreation`,</li>
</ol>
<blockquote>
<p>isSingletonCurrentlyInCreation<code>,// 循环依赖问题A--&gt;B --&gt;A，new 出对象后还没最终在容器中生成bean，还要走完生命周期。</code></p>
</blockquote>
<ol start="5">
<li><p>(1)Check if bean definition exists in this factory. (2) Guarantee initialization of beans that the current bean depends on.(3) Create bean instance.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">CREATE_BEAN_INSTANCE--&gt;Decision&#123;mbd.isSingleton&#125;</span><br><span class="line">Decision --&gt;|true| getSingleton</span><br><span class="line">Decision --&gt;|else if mbd.isPrototype| D[Result one]</span><br><span class="line">Decision--&gt;|else| E[Result two]</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>​        第二次调用getSingleton</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="keyword">return</span> createBean(beanName, mbd, args);<span class="comment">//创建bean</span></span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">							<span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">							<span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">							<span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">							destroySingleton(beanName);</span><br><span class="line">							<span class="keyword">throw</span> ex;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h4><p>spring 实例化 包括初始化</p>
<p>初始化 new bean()之后的过程</p>
<p>new —-XXXXBeanPostProcessor —A —-@PostConstruct —–BeanPostProcessor</p>
<blockquote>
<p>!!!! Instantiation的过程是包括Initialization的。BeanPostProcessor接口只能管理Initialization的阶段。但还有很多接口是继承了BeanPostProcessor接口的。像InstantiationAwareBeanPostProcessor extends BeanPostProcessor。</p>
</blockquote>
<hr>
<blockquote>
<p>9个地方，5个后置处理器</p>
<p>1.Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</p>
</blockquote>
<p>BeanPostProcessor，可以在spring容器new了bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。如果配置了多个<code>BeanPostProcessor</code>，那么可以通过设置<code>&#39;order&#39;</code>属性来控制<code>BeanPostProcessor</code>的执行次序（仅当<code>BeanPostProcessor</code>实现了<code>Ordered</code>接口时，你才可以设置此属性，因此在编写自己的<code>BeanPostProcessor</code>实现时，就得考虑是否需要实现<code>Ordered</code>接口）。此时对应的bean已经实例化了，但是对应的属性注入等还没有进行，即在调用InitializingBean的afterPropertiesSet()方法或bean对应的init-method之前；而方法postProcessAfterInitialization()将在bean被完全初始化后进行回调，此时对应的依赖注入已经完成，即在调用InitializingBean的afterPropertiesSet()方法或对应init-method方法之后。两个方法的参数以及返回值对应的意义都是一样的，其中参数bean表示当前状态的bean，参数beanName表示当前bean的名称，而方法对应的返回值即表示需要放入到bean容器中的bean，所以用户如果有需要完全可以在这两个方法中对bean进行修改，即封装自己的bean进行返回。</p>
<blockquote>
<p>实现了BeanPostProcessor的bean，不会被postProcessBeforeInitialization,和postProcessAfterInitialization当做参数调用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean初始化方法调用前被调用,返回null不会使bean为空，返回其他对象可以代替原有对象</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">//bean初始化方法调用后被调用</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里说的初始化方法，指的是下面两种：<br>1）bean实现了InitializingBean接口，对应的方法为afterPropertiesSet</p>
<p>2）在bean定义的时候，通过init-method设置的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">A[A:AnnotationConfigApplicationContext]</span><br><span class="line">B((A.refresh))</span><br><span class="line">1.4[postProcessBeanFactory]</span><br><span class="line">1.5[invokeBeanFactoryPostProcessors]</span><br><span class="line">1.6[registerBeanPostProcessors]</span><br><span class="line">A --&gt; B</span><br><span class="line">subgraph 1</span><br><span class="line">	B --&gt; 1.4</span><br><span class="line">	1.4 --&gt; 1.5</span><br><span class="line">	1.5 --&gt; 1.6</span><br><span class="line">	subgraph 1.6</span><br><span class="line">		1.6 --&gt; 1.6.1</span><br><span class="line">	end</span><br><span class="line">end</span><br><span class="line">A.finishRefresh((finishRefresh))--&gt;beanFactory.preInstantiateSingletons</span><br><span class="line">beanFactory.preInstantiateSingletons --&gt;preInstantiateSingletons</span><br><span class="line">preInstantiateSingletons --&gt; |Loop|getBean</span><br><span class="line">subgraph Trigger initialization of all non-lazy singleton beans</span><br><span class="line">getBean --&gt; getSingleton</span><br><span class="line">getSingleton --&gt;singletonFactory.getObject</span><br><span class="line">singletonFactory.getObject--&gt;doGetBean</span><br><span class="line">doGetBean --&gt;createBean</span><br><span class="line">createBean --&gt;doCreateBean</span><br><span class="line">doCreateBean --&gt; initializeBean</span><br><span class="line">initializeBean--&gt;applyBeanPostProcessorsBeforeInitialization</span><br><span class="line">applyBeanPostProcessorsBeforeInitialization --&gt;processor.postProcessBeforeInitialization</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有趣的添加了@configuration的bean,是被spring的cllib增强的代理类。com.mxdc.Config$$EnhancerBySpringCGLIB$$aff7e6e7</p>
</blockquote>
]]></content>
      <categories>
        <category>spring源码解析</category>
      </categories>
  </entry>
  <entry>
    <title>spring源码解析/AOP</title>
    <url>/blog/2020/04/29/spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/AOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="AOP——面向切面编程"><a href="#AOP——面向切面编程" class="headerlink" title="AOP——面向切面编程"></a>AOP——面向切面编程</h4><p>传统开发基于继承，至上而下的。会产生一些跟业务逻辑无关的横切性问题、日记记录、错误处理等。 抽取汇总成切面。不用关系主业务，可以只关心切面的编程。什么时候切入、切入到哪里、之前还是之后。更加关注执行的时间和顺序。</p>
<ul>
<li>join point 在代码中就是method</li>
<li>PointCut 某些join Point的集合</li>
<li>target Object还没有被增强的目标对象</li>
<li><strong>Weaving</strong>织入，增强的过程</li>
<li>Advice:增强的逻辑</li>
</ul>
<blockquote>
<p>@AspectJ指的是将方面声明为用注释注释的常规Java类的样式。@AspectJ样式是由AspectJ项目作为AspectJ 5发行版的一部分引入的。Spring使用AspectJ提供的用于切入点解析和匹配的库来解释与AspectJ 5相同的注释。但是AOP运行时仍然是纯Spring AOP，并且不依赖于AspectJ编译器或编织器。</p>
</blockquote>
<h4 id="AOP的实现框架"><a href="#AOP的实现框架" class="headerlink" title="AOP的实现框架"></a>AOP的实现框架</h4><p>Aop是一种面向切面编程的概念。springAop、AspectJ都是Aop的实现，SpringAop有自己的语法，但是语法复杂，所以SpringAop借助了AspectJ的注解，但是底层实现还是自己的（我们可以知道<strong>spring</strong>底层使用的是JDK或者CGLIB来完成的代理,并且在官网上<strong>spring</strong>给出了aspectj的文档,和springAOP是不同的）</p>
<h4 id="spring-支持-Aspect风格"><a href="#spring-支持-Aspect风格" class="headerlink" title="spring 支持@Aspect风格"></a>spring 支持@Aspect风格</h4><ol>
<li>EnableAspectJAutoProxy</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="comment">// @EnableAspectJAutoProxy(proxyTargetClass = true)使用cglib</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用注解@Apsect 声明一个切面</li>
<li>使用@Pointcut声明切点</li>
<li>声声明adive</li>
</ol>
<h4 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h4><ol>
<li>excution</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">example:</span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(..))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的任意方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.chenss.dao.*.*(..))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的public方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.chenss.dao.*.*())"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的public 无方法参数的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(java.lang.String, ..))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的第一个参数为String类型的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(java.lang.String))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的只有一个参数，且参数为String类型的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(java.lang.String))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的只有一个参数，且参数为String类型的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * *(..))"</span>)<span class="comment">//匹配任意的public方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* te*(..))"</span>)<span class="comment">//匹配任意的以te开头的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.IndexDao.*(..))"</span>)<span class="comment">//匹配com.chenss.dao.IndexDao接口中任意的方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao..*.*(..))"</span>)<span class="comment">//匹配com.chenss.dao包及其子包中任意的方法</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>with</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// within与execution相比，粒度更大，仅能实现到包和接口、类级别。而execution可以精确到方法的返回值，参数个数、修饰符、参数类型等</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.chenss.dao.*)"</span>)<span class="comment">//匹配com.chenss.dao包中的任意方法</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.chenss.dao..*)"</span>)<span class="comment">//匹配com.chenss.dao包及其子包中的任意方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>args</p>
<p>args表达式的作用是匹配指定参数类型和指定参数数量的方法,与包名和类名无关</p>
</li>
<li><p>@annotation,匹配使用了PoinCutAnnotation的方法,加@表示有没有加这个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"@annotation(com.mxdc.aspect.PointCutAnnotation)"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>this和target</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"target(com.chenss.dao.IndexDaoImpl)"</span>)<span class="comment">//目标对象，也就是被代理的对象。限制目标对象为com.chenss.dao.IndexDaoImpl类</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"this(com.chenss.dao.IndexDaoImpl)"</span>)<span class="comment">//当前对象，也就是代理对象，代理对象时通过代理目标对象的方式获取新的对象，与原值并非一个</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="advice通知类型"><a href="#advice通知类型" class="headerlink" title="advice通知类型:"></a><strong>advice</strong>通知类型:</h4><ul>
<li><p><strong>Before</strong> 连接点执行之前，但是无法阻止连接点的正常执行，除非该段执行抛出异常</p>
</li>
<li><p><strong>AfterReturning</strong>  连接点正常执行之后，执行过程中正常执行返回退出，非异常退出</p>
</li>
<li><p><strong>After</strong> <strong>throwing</strong>  执行抛出异常的时候</p>
</li>
<li><p><strong>After</strong> (<strong>finally</strong>)  无论连接点是正常退出还是异常退出，都会执行</p>
</li>
<li><p><strong>Around</strong> <strong>advice</strong>: 围绕连接点执行，例如方法调用。这是最有用的切面方式。<strong>around</strong>通知可以在方法调用之前和之后执行自定义行为。它还负责选择是继续加入点还是通过返回自己的返回值或抛出异常来快速建议的方法执行</p>
</li>
</ul>
<h4 id="Proceedingjoinpoint-和JoinPoint的区别"><a href="#Proceedingjoinpoint-和JoinPoint的区别" class="headerlink" title="Proceedingjoinpoint 和JoinPoint的区别:"></a><strong>Proceedingjoinpoint</strong> 和<strong>JoinPoint</strong>的区别:</h4><p><strong>Proceedingjoinpoint</strong> 继承了<strong>JoinPoint</strong>,<strong>proceed</strong>()这个是<strong>aop</strong>代理链执行的方法。并扩充实现了<strong>proceed</strong>()方法，用于继续执行连接点。<strong>JoinPoint</strong>仅能获取相关参数，无法执行连接点。</p>
<p><strong>JoinPoint</strong>的方法</p>
<p>1.java.lang.Object[] <strong>getArgs</strong>()：获取连接点方法运行时的入参列表； </p>
<p>2.Signature <strong>getSignature</strong>() ：获取连接点的方法签名对象； </p>
<p>3.java.lang.Object <strong>getTarget</strong>() ：获取连接点所在的目标对象； </p>
<p>4.java.lang.Object <strong>getThis</strong>() ：获取代理对象本身；</p>
<p><strong>proceed</strong>()有重载,有个带参数的方法,可以修改目标方法的的参数的值</p>
]]></content>
      <categories>
        <category>spring源码解析</category>
      </categories>
  </entry>
  <entry>
    <title>spring/annotation</title>
    <url>/blog/2020/04/29/spring/annotation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><ol>
<li>导入一个bean（@Import注解在4.2之前只支持导入配置类）</li>
<li>导入配置类</li>
</ol>
<h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:applicationContext-democonfig2.xml"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>office/office判题</title>
    <url>/blog/2020/04/29/office/office%E5%88%A4%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Office判题数据流图"><a href="#Office判题数据流图" class="headerlink" title="Office判题数据流图"></a>Office判题数据流图</h4><p><img src="/blog/.io//1571494814784.png" alt="1571494814784"></p>
<blockquote>
<p>用户作答完毕上传作答文件和相关信息给判题控制器，控制器接收用户上传的参数和文件并获取对应题号的标准答案文件。获取答案文档后，将用户上传的作答文件和标准答案文档一同存储到临时目录。当控制器判断满足判题的条件后向批改器发起批改消息。批改器收到批改消息后，先获取对应题目的判题规则或者规则数组，然后调用具体的工具类解析规则进行判题并返回批改结果。</p>
</blockquote>
<h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器主要用于接收各类题目的作答文件，并向判题器发送判题消息，控制器包含有以下接口，接口的详细信息请查看接口文档。</p>
<p><img src="/blog/.io//1571553477266.png" alt="1571553477266"></p>
<h4 id="判题器"><a href="#判题器" class="headerlink" title="判题器"></a>判题器</h4><p>判题器的类图如下</p>
<p><img src="/blog/.io//1571496552148.png" alt="1571496552148"></p>
<p><img src="/blog/.io//1571496620517.png" alt="1571496620517"></p>
<p>ICorrect为 Word/Excel/PPT单道大题的批改接口,ExcelCorrectServiceImpl、WordCorrectSErviceImpl、PPTCorrectServiceImpl为具体实现接口。其中主要方法如下:</p>
<ul>
<li><code>correct(List&lt;jString&gt; correctJson)</code> 方法用于根据题目json规则数组判分</li>
<li><code>correctItem(String rule)</code> 方法用于根据每一道小题的规则判分</li>
<li><code>getComplexSolutionDTO(String num)</code>根据大题号返回操作题相关信息类（包括操作题类型，题目资源链接，题目规则）</li>
</ul>
<h4 id="判题规则"><a href="#判题规则" class="headerlink" title="判题规则"></a>判题规则</h4><h5 id="判题的形式化方案"><a href="#判题的形式化方案" class="headerlink" title="判题的形式化方案"></a>判题的形式化方案</h5><p>判题的形式化方案描述如下图</p>
<p><img src="/blog/.io//1571562761796.png" alt="1571562761796"></p>
<p>其中,①部分表示的是知识点X和该知识点的总分数值Y。②、③、④部分共同组成一个布尔型的数学表达式<strong>（知识点参数与标准答案进行比较，大部分运算为等值运算）</strong>,当表达式的结果为“真”时,该知识点的参数得分,否则不得分。②部分详细地描述了知识点的类别和该知识点的参数信息,规则解析首先分析该部分的内容,并根据参数从学生作答文档中获取指定的信息，即学生对该知识点的操作结果信息,然后再与④部分给定的标准进行指定运算。</p>
<blockquote>
<p>每个知识点有多个参数，知识点得分公式如下：<br>$$<br>Score =\sum_{i=1}^{n}score_{i}<br>$$</p>
<p>$$<br>score_{i}  \subseteq \left {   \frac{Y}{n} ,0 \right }<br>$$</p>
<p>其中Score为一个知识点（对应一条规则）的总得分，n为这个知识点参数的个数，Y为这个知识点的总分值，$$\frac{Y}{n}$$为每个参数的的分值。$$score_{i}$$为第i个参数的得分情况。  </p>
</blockquote>
<p>假为第一段“企业质量管理浅析”应用样式“标題1”，如何判断对应位置的样式,可以用以下方法进行形式化描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location_S &#x3D; “企业质量管理浅析”</span><br><span class="line"></span><br><span class="line">Doc.段落(第一段).字符串(location_S).样式&#x3D;“标题1”</span><br></pre></td></tr></table></figure>

<p>先通过<strong>定位</strong>被操作段落,确定具体位置所在,进行数值比较,正确即得分。如何定位文档属性？</p>
<h5 id="文档属性的定位（属性的获取）"><a href="#文档属性的定位（属性的获取）" class="headerlink" title="文档属性的定位（属性的获取）"></a>文档属性的定位（属性的获取）</h5><ol>
<li><p>excel文档属性信息的定位</p>
<p>在excel中，属性的定位路径有： <code>表[.单元格[.字符串]].属性</code></p>
</li>
<li><p>word文档属性信息的定位</p>
<p>在word和ppt需要定位的属性比较复杂，需要结合知识点进行定位。在word中对字符串、页、段落的属性定位有：<code>页[.段落[.字符串]].属性</code>；对于元素有<code>页眉[.段落.[.字符串]].属性</code>，表格有<code>表格[.[行[.列]]].属性</code></p>
</li>
<li><p>ppt文档属性信息的定位</p>
<p>在PPT中，主要由各种元素(文本框等、幻灯片等)组成。其定位有<code>页码[.位置[.元素[.段落[.字符串]]]].属性</code></p>
<p>其中[]表示可能存在的路径,[]里面的部分可以没有。这里定义Location类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> * 定位类 Location</span></span><br><span class="line"><span class="comment"> * 定位成员变量 lp,ls,lg,lr</span></span><br><span class="line"><span class="comment"> * 在excel中，lp定位表，ls在lp的基础上定位单元格，lo代表不取行(1,3,67,1)</span></span><br><span class="line"><span class="comment"> * lg不取列(1,3,67,1)</span></span><br><span class="line"><span class="comment"> * 在word中，lp定位段落，ls定位字符串；在表格中lp定位行，ls定位列；lo定位元素(header,table,paragraph)</span></span><br><span class="line"><span class="comment"> * 在ppt中，lp定位幻灯片页码，ls 定位元素位置（所有对象解析后根据在幻灯片中的位置会被存入一个数组中），</span></span><br><span class="line"><span class="comment"> * lo定位元素（如幻灯片、文本框等），lg定位段落，lr定位某串字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> livejq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ToString</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 定位属性 */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> String lp,ls,lo,lg,lr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序里面先通过获取Location的属性，然后通过Utils类里面的get方法获取对应的文档对象。这里获取文档对象的主要方法是通过判断某个文档元素对象(段落、表格、字符串等)是否包含有定位对象Location类属性中的对应关键字的值。如果包含则返回这个对象元素。当然还有其他获取方法，如获取表格中的某个单元格可以先获取包含关键字的表格后，然后在根据Location中lp,ls指定的行和列获取对应的表格。</p>
<p><img src="/blog/.io//1571538764631.png" alt="1571538764631"></p>
</li>
</ol>
<h5 id="规则的定义"><a href="#规则的定义" class="headerlink" title="规则的定义"></a>规则的定义</h5><p>这里使用<em>JSON</em>(JavaScript Object Notation)格式定义规则格式，主要属性有分值(score)、知识点(knowledge)、知识点参数(param)，和定位参数(location)以及文档文件名(baseFile)。其中下图中标有required的为必须属性。其中param(key/value)参数中的键(key)应该根据知识点的不同而不同，而param中的值(value)为该属性的正确值，也就是标准答案。当param中的value不是标准答案而是一个定位对象（location）时，应该根据Location重新找到文档中的标准答案，重新取到标准答案后一般是进行等值比较，如果是非等值比较可以添加一个运算符属性指定其他比较类型。</p>
<p>一个简单的JSON格式规则如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"score"</span>: <span class="string">"value"</span>,</span><br><span class="line">  <span class="attr">"knowledge"</span>: <span class="string">"value"</span>,</span><br><span class="line">  <span class="attr">"param"</span>: &#123;</span><br><span class="line">    <span class="attr">"attribute1"</span>: <span class="string">"value"</span>,</span><br><span class="line">    <span class="attr">"attribute2"</span>: <span class="string">"value"</span>,</span><br><span class="line">    <span class="attr">"attribute3"</span>:  &#123;</span><br><span class="line">      <span class="attr">"location"</span>: &#123;</span><br><span class="line">        <span class="attr">"lp"</span>: <span class="string">"value"</span>,</span><br><span class="line">        <span class="attr">"ls"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"lr"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"lo"</span>: <span class="string">"value"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"location"</span>: &#123;</span><br><span class="line">    <span class="attr">"lp"</span>: <span class="string">"value"</span>,</span><br><span class="line">    <span class="attr">"ls"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"lr"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"lo"</span>: <span class="string">"value"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"baseFile"</span>: <span class="string">"Word.docx"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/blog/.io//1571547824538.png" alt="1571547824538"></p>
<p>判题JSON格式的Schema 约束如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">"definitions"</span>: &#123;&#125;,</span><br><span class="line">       <span class="attr">"$schema"</span>: <span class="string">"http://json-schema.org/draft-07/schema#"</span>,</span><br><span class="line">       <span class="attr">"$id"</span>: <span class="string">"http://example.com/root.json"</span>, </span><br><span class="line">       <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">       <span class="attr">"title"</span>: <span class="string">"JSON 判题规则"</span>,</span><br><span class="line">       <span class="attr">"required"</span>: [</span><br><span class="line">         <span class="string">"score"</span>,</span><br><span class="line">         <span class="string">"knowledge"</span>,</span><br><span class="line">         <span class="string">"param"</span>,</span><br><span class="line">         <span class="string">"baseFile"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"score"</span>: &#123;</span><br><span class="line">          <span class="attr">"$id"</span>: <span class="string">"#/properties/score"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"分值"</span>,</span><br><span class="line">          <span class="attr">"pattern"</span>: <span class="string">"^[1-9]\\d*\\.[0-9]&#123;1&#125;"</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"knowledge"</span>: &#123;</span><br><span class="line">          <span class="attr">"$id"</span>: <span class="string">"#/properties/knowledge"</span>,  </span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"知识点编号"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"param"</span>: &#123;</span><br><span class="line">          <span class="attr">"$id"</span>: <span class="string">"#/properties/param"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"知识点参数对象"</span>,</span><br><span class="line">          <span class="attr">"required"</span>: [</span><br><span class="line">                    <span class="string">"attribute1"</span></span><br><span class="line">                  ],</span><br><span class="line">          <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"attribute1"</span>: &#123;</span><br><span class="line">              <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/attribute1"</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"title"</span>: <span class="string">"属性值"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"attribute2"</span>: &#123;</span><br><span class="line">              <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/attribute2"</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"title"</span>: <span class="string">"属性值"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"attribute3"</span>: &#123;</span><br><span class="line">                <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/attribute3"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"The Attribute3 Schema"</span>,</span><br><span class="line">                <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                  <span class="attr">"location"</span>: &#123;</span><br><span class="line">                    <span class="attr">"$id"</span>: <span class="string">"#/properties/location"</span>,</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>: <span class="string">"定位对象"</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;            </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"location"</span>: &#123;</span><br><span class="line">         <span class="attr">"$id"</span>: <span class="string">"#/properties/location"</span>,  </span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"定位元素对象"</span>,</span><br><span class="line">          <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"lp"</span>: &#123;</span><br><span class="line">              <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/lp"</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"title"</span>: <span class="string">"定位参数"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"ls"</span>: &#123;</span><br><span class="line">              <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/ls"</span>,</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"title"</span>: <span class="string">"定位参数"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"lr"</span>: &#123;</span><br><span class="line">            <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/lr"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">             <span class="attr">"title"</span>: <span class="string">"定位参数"</span></span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">"lo"</span>: &#123;</span><br><span class="line">            <span class="attr">"$id"</span>: <span class="string">"#/properties/param/properties/lo"</span>,</span><br><span class="line">             <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">             <span class="attr">"title"</span>: <span class="string">"定位参数"</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">"baseFile"</span>: &#123;</span><br><span class="line">        <span class="attr">"$id"</span>: <span class="string">"#/properties/baseFile"</span>,  </span><br><span class="line">         <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">         <span class="attr">"title"</span>: <span class="string">"文档文件名"</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>JSON Schema用于规范规则格式，根据知识点（knowledge）的不同其schema也应有所不同。其中<code>type</code>关键字指定JSON数据的基本数据类型，<code>title</code>关键字用来描述这个字段。<code>properties</code>指定JSON对象中的各种不同key和应该满足的校验逻辑。``pattern<code>关键字待校验JSON元素符合该关键字指定的正则表达式，才算通过校验。required</code>这个关键字是数组，数组中的元素必须是字符串，必须是唯一的。更多JSON Schema规范请参考<a href="http://json-schema.org/specification.html" target="_blank" rel="noopener">Specification | JSON Schema</a>。JSON Schem可借助网站<a href="https://jsonschema.net/" target="_blank" rel="noopener">JSON Schema Tool</a>进行编写和查看 。</p>
<p>Json规则对应的Pojo类CheckBean如下,一个CheckBean实例对应一个知识点规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gzmtu.monster.common;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MXDC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckBean</span></span>&#123;</span><br><span class="line">    <span class="comment">/** 规则编号 */</span></span><br><span class="line">    <span class="keyword">private</span> String knowledge;</span><br><span class="line">    <span class="comment">/** 定位对象 */</span></span><br><span class="line">    <span class="keyword">private</span> Location location;</span><br><span class="line">    <span class="comment">/** 参数集合 */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String ,Object&gt; param;</span><br><span class="line">    <span class="comment">/** 得分 */</span></span><br><span class="line">    <span class="keyword">private</span> String score;</span><br><span class="line">    <span class="comment">/** 基础操作文档 */</span></span><br><span class="line">    <span class="keyword">private</span> String baseFile;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="知识点的定义"><a href="#知识点的定义" class="headerlink" title="知识点的定义"></a>知识点的定义</h5><p>这里我们将需要操作到的文档元素属性定义成枚举类，而枚举类中的常量就是对应元素的属性值。枚举类定义在<code>org.gzmtu.monster.common.office.excel</code>、<code>org.gzmtu.monster.common.office.word</code>和``org.gzmtu.monster.common.office.ppt`包中。</p>
<p><img src="/blog/.io//1571550928467.png" alt="1571550928467"></p>
<p>元素属性的封装如下例所示，必须定义属性ID和属性名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装word字体属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> srl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WordFontPropertiesEnum &#123;</span><br><span class="line">    <span class="comment">/** 字体大小 */</span></span><br><span class="line">    FONT_SIZE(<span class="number">1</span>,<span class="string">"文字大小"</span>),</span><br><span class="line">    <span class="comment">/** 字体颜色 */</span></span><br><span class="line">    FONT_COLOR(<span class="number">2</span>,<span class="string">"文字颜色"</span>),</span><br><span class="line">    <span class="comment">/** 字体 */</span></span><br><span class="line">    FONT_FAMILY(<span class="number">3</span>,<span class="string">"文字字体"</span>),</span><br><span class="line">    <span class="comment">/** 加粗 */</span></span><br><span class="line">    IS_BOLD(<span class="number">4</span>,<span class="string">"加粗"</span>),</span><br><span class="line">    <span class="comment">/** 斜体 */</span></span><br><span class="line">    IS_ITALIC(<span class="number">5</span>,<span class="string">"斜体"</span>),</span><br><span class="line">    <span class="comment">/** 主题颜色 */</span></span><br><span class="line">    THEME_COLOR(<span class="number">6</span>,<span class="string">"主题颜色"</span>),</span><br><span class="line">    <span class="comment">/** 文字宽度 */</span></span><br><span class="line">    FIT_TEXT(<span class="number">7</span>,<span class="string">"文字宽度"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 属性id*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/** 属性名称*/</span></span><br><span class="line">    <span class="keyword">private</span> String property;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了对属性的封装外，我们将要检查的属性也定义成枚举类(WordCorrectEnums、PPTCorrectEnums、ExcelCorrectEnums)。枚举类中的常量就是对应JSON规则中的knowledge，也可以说是规则的编码。knowledged的命名为“动词”+“文档属性枚举类中的常量名”。</p>
<p><img src="/blog/.io//1571552956061.png" alt="1571552956061"></p>
<h5 id="判题规则中的比较运行-运算符"><a href="#判题规则中的比较运行-运算符" class="headerlink" title="判题规则中的比较运行(运算符)"></a>判题规则中的比较运行(运算符)</h5><p>通过JOSN规则中的location属性和param属性我们可以获取到要进行比较运算的操作数。大多数情况下是等值比较，也就是获取作答文档中的属性和标准答案进行等值比较，如果正确则给分。但是也存在一些非等值比较的情况。这里我们把运算符加到答案里面，也就是param参数中的值中，不加任何运算符的默认为等值比较。具体的比较运算我们通过OfficeGeneralUtils类实现。</p>
<p><img src="/blog/.io//1571549541550.png" alt="1571549541550"></p>
<p>这里定义的运算符有非（NOT）、大于（LARGER）、不小于（NOTSMALLER）、小于（SMALLER）、不大于（NOTLARGER）。对于一些数值属性的获取可能存在误差，所有对数值的等值比较采用近似比较的方式，允许其存在一定的误差。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断数值近似度，误差值在3以内</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 获取学生提交文件的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 答案参考参数值</span></span><br><span class="line"><span class="comment">     * return 是否近似？true:false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">approach</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">int</span> param)</span></span>&#123;</span><br><span class="line">        <span class="comment">//差值</span></span><br><span class="line">        <span class="keyword">return</span> Math.abs(value - param) &lt; <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="判题器的实现"><a href="#判题器的实现" class="headerlink" title="判题器的实现"></a>判题器的实现</h4><p>实现了ICorrect接口的类具有批改题目的能力。其中主要方法如下:</p>
<ul>
<li><p><code>correct(List&lt;jString&gt; correctJson)</code> 方法用于根据多道题目json<strong>规则数组</strong>判分</p>
</li>
<li><p><code>correctItem(String rule)</code> 方法用于根据每一道小题的规则判分</p>
</li>
<li><p><code>getComplexSolutionDTO(String num)</code>根据大题号返回操作题相关信息类（包括操作题类型，题目资源链接，题目规则）</p>
<p>word判题器和Excel判题器及PPT判题器的实现大体是一致的，有较大区别的地方的话会另外说明。这里以word判题器的判决时序图为例。word判题器实现的时序图如下 :</p>
</li>
</ul>
<p><img src="/blog/.io//1571559079345.png" alt="1571559079345"></p>
<ul>
<li>控制器向WordCorrectServiceImpl发送correct消息,WordCorrectServiceImple执行correct方法遍历<strong>规则数组</strong>个数并循环调用correctItem()方法对每一条规则数组进行判题。每一条规则数组中可能存在多个知识点规则，这时先调用JSONObject解析json数组成<code>List&lt;CheckBean&gt;</code>,然后在循环遍历CheckBean数组并调用CorrectParam()函数。</li>
<li>correctParam(CheckBean checkBean)函数用于对单个知识点规则的批改。其实现的时序图如下:</li>
</ul>
<p><img src="/blog/.io//1571561511391.png" alt="1571561511391"></p>
<p>在执行correctParam时，先解析知识点规则中的baseFile属性，并判断WordUtils是否已经设置了baseFile对应的文档，如果没有则调用WordUtils的setDocmet()方法读取baseFile对应的文档并转化为word文档对象。然后获取要批改的knowledge，并通过WordCorrectEnums解析成枚举常量。最后进入switch结构中对应的case子句子中构调用WordUtils方法进行判题，并返回评分信息。WordUtils具体调用的check**()方法请查看文档手册。</p>
<ul>
<li><p>评分信息</p>
<p>评分信息通过调用OfficeGeneralUtils.correctInfo(totalScore,msg)返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   	 * 评分详细信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info 评分信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;String,Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">correctInfo</span><span class="params">(<span class="keyword">float</span> score, StringBuilder info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> correctInfo(String.valueOf(score), info.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判题器中的check方法集中写在Utils中，耦合度高，可重构改进。可在定义一个Check类接口，分离其中的check方法，面向接口编程减少耦合度，也方便拓展修改。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>office</category>
      </categories>
  </entry>
  <entry>
    <title>office/docx 格式简介</title>
    <url>/blog/2020/04/29/office/docx%20%E6%A0%BC%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="docx-格式简介"><a href="#docx-格式简介" class="headerlink" title="docx 格式简介"></a>docx 格式简介</h4><hr>
<p><code>docx</code> 是微软为 Word 软件开发的文件格式，其背后是一个国际标准——<a href="http://officeopenxml.com/" target="_blank" rel="noopener">Office Open XML</a>（简称 OOXML）。<code>docx</code> 其实是打包文件，把扩展名从 <code>docx</code> 改为 <code>zip</code> 就能使用解压软件打开，看到其中的内容。解压后的文件结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── [Content_Types].xml</span><br><span class="line">├── _rels</span><br><span class="line">├── docProps</span><br><span class="line">│   ├── app.xml</span><br><span class="line">│   └── core.xml</span><br><span class="line">└── word</span><br><span class="line">    ├── _rels</span><br><span class="line">    │   ├── document.xml.rels</span><br><span class="line">    │   └── footnotes.xml.rels</span><br><span class="line">    ├── document.xml</span><br><span class="line">    ├── fontTable.xml</span><br><span class="line">    ├── footnotes.xml</span><br><span class="line">    ├── media</span><br><span class="line">    ├── numbering.xml</span><br><span class="line">    ├── settings.xml</span><br><span class="line">    ├── styles.xml</span><br><span class="line">    ├── theme</span><br><span class="line">    │   └── theme1.xml</span><br><span class="line">    └── webSettings.xml</span><br></pre></td></tr></table></figure>

<h5 id="26套判题json"><a href="#26套判题json" class="headerlink" title="26套判题json"></a>26套判题json</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_FILE_IS_EXIST"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"fileName"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="comment">//页大小,页边距度量为缇,1厘米=567缇,xml存储值为缇,厘米转化为缇进行四舍五入</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">  	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_PAGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">    	<span class="string">"PAGE_SIZE"</span>:<span class="string">"11907:16840"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">  	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_PAGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">       <span class="string">"PAGE_MARGIN_TOP"</span>:<span class="number">1418</span>,</span><br><span class="line">       <span class="string">"PAGE_MARGIN_BOTTOM"</span>:<span class="number">1134</span>,</span><br><span class="line">       <span class="string">"PAGE_MARGIN_LEFT"</span>:<span class="number">1418</span>,</span><br><span class="line">      <span class="string">"PAGE_MARGIN_RIGHT"</span>:<span class="number">1418</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">  &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">  	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_PAGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">       <span class="string">"PAGE_MARGIN_HEADER"</span>:<span class="number">567</span>,</span><br><span class="line">       <span class="string">"PAGE_MARGIN_FOOTER"</span>:<span class="number">567</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">    	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">      	<span class="string">"knowledge"</span>:<span class="string">"CHECK_PICTURE_IS_EXIST"</span>,</span><br><span class="line">      	<span class="string">"param"</span>:&#123;</span><br><span class="line">          <span class="string">"FILE_NAME"</span>:<span class="string">"Logo.gif"</span></span><br><span class="line">		&#125;,</span><br><span class="line">      	<span class="string">"location"</span>:&#123;<span class="string">"lo"</span>:<span class="string">"HEADER"</span>&#125;,</span><br><span class="line">      	<span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">      	<span class="string">"knowledge"</span>:<span class="string">"CHECK_HEADER_CONTENT"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">        	<span class="string">"CONTENT"</span>:<span class="string">"北京向阳中路"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">	&#123;</span><br><span class="line">    	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">      	<span class="string">"knowledge"</span>:<span class="string">"CHECK_BORDERS"</span>,</span><br><span class="line">      	<span class="string">"param"</span>:&#123;</span><br><span class="line">        	<span class="string">"BOTTOM_COLOR"</span>:<span class="string">"FF0000"</span>,</span><br><span class="line">          	<span class="string">"BOTTOM_SIZE"</span>:<span class="string">"18"</span>,</span><br><span class="line">          	<span class="string">"BOTTOM_STYLE"</span>:<span class="string">"thinThickSmallGap"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      	<span class="string">"location"</span>:&#123;<span class="string">"lo"</span>:<span class="string">"HEADER"</span>&#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  	&#123;</span><br><span class="line">    	<span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">      	<span class="string">"knowledge"</span>:<span class="string">"CHECK_FOOTER_CONTENT"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">        	<span class="string">"CONTENT"</span>:<span class="string">"北京市海淀区中关村北大街"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      	<span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_TABLE"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"TABLE_WIDTH_TYPE"</span>:<span class="string">"pct"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      	<span class="string">"location"</span>:&#123;</span><br><span class="line">      		<span class="string">"lo"</span>:<span class="string">"姓名："</span></span><br><span class="line">    	&#125;,</span><br><span class="line">       <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125; </span><br><span class="line">]</span><br><span class="line"><span class="number">5</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_TABLE_CELL"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"BORDER_TOP_STYLE"</span>:<span class="string">"dotDash"</span>,</span><br><span class="line">            <span class="string">"BORDER_BOTTOM_STYLE"</span>:<span class="string">"dashDotStroked"</span>,</span><br><span class="line">            <span class="string">"BORDER_LEFT_STYLE"</span>:<span class="string">"nil"</span>,</span><br><span class="line">            <span class="string">"BORDER_RIGHT_STYLE"</span>:<span class="string">"nil"</span>,</span><br><span class="line">            <span class="string">"VERTICAL_ALINGMENT"</span>:<span class="string">"CENTER"</span>,</span><br><span class="line">            <span class="string">"ALINGMENT"</span>:<span class="string">"CENTER"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"0"</span>,</span><br><span class="line">            <span class="string">"ls"</span>:<span class="string">"0"</span>,</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"家长会通知回执"</span></span><br><span class="line">        &#125;,</span><br><span class="line">       <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *lo="TABLE"，当lo为表格时,</span></span><br><span class="line"><span class="comment"> *lp="科目"，lp为该表格区别于其他表格的文本，用于定位表格</span></span><br><span class="line"><span class="comment"> *------------------------*</span></span><br><span class="line"><span class="comment"> *lo="PARAGRAPH",当lo为段落时</span></span><br><span class="line"><span class="comment"> *lp="尊敬的",lp为改段落区别于其他段落的文本,用于定义段落</span></span><br><span class="line"><span class="comment"> *------------------------*</span></span><br><span class="line"><span class="comment"> *当knowledge为CHECK_MAILL_MERGE时(邮寄合并)</span></span><br><span class="line"><span class="comment"> *param(参数)MERGE_FIELD(代码域)可以有多个,</span></span><br><span class="line"><span class="comment"> *用MERGE_FIELD_*(*可以为序号)</span></span><br><span class="line"><span class="comment"> *MERGE_FIELD值不加引号"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"score"</span>:<span class="string">"3.0"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_MAIL_MERGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">      <span class="string">"MERGE_FIELD"</span>:<span class="string">"MERGEFIELD姓名"</span></span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="string">"location"</span>:&#123;</span><br><span class="line">      <span class="string">"lp"</span>:<span class="string">"尊敬的"</span>,</span><br><span class="line">      <span class="string">"lo"</span>:<span class="string">"PARAGRAPH"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">  	<span class="string">"score"</span>:<span class="string">"3.0"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_MAIL_MERGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">      <span class="string">"MERGE_FIELD_1"</span>:<span class="string">"MERGEFIELD语文\\#0.00"</span>,</span><br><span class="line">      <span class="string">"MERGE_FIELD_2"</span>:<span class="string">"MERGEFIELD物理\\#0.00"</span>,</span><br><span class="line">      <span class="string">"MERGE_FIELD_3"</span>:<span class="string">"MERGEFIELD总分\\#0.00"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"location"</span>:&#123;</span><br><span class="line">      <span class="string">"lo"</span>:<span class="string">"TABLE"</span>,</span><br><span class="line">      <span class="string">"lp"</span>:<span class="string">"科目"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *当没有给出具体参数是,只要设置了跟原来不一样的样式即可</span></span><br><span class="line"><span class="comment"> *在值中加“-”表示非</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"1.0"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_FONT"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"FONT_SIZE"</span>:<span class="string">"--1"</span>,</span><br><span class="line">            <span class="string">"FONT_COLOR"</span>:<span class="string">"-FF0000"</span>,</span><br><span class="line">            <span class="string">"FONT_FAMILY"</span>:<span class="string">"-null"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"RUN"</span>,</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"家长会通知"</span>,</span><br><span class="line">            <span class="string">"ls"</span>:<span class="string">"会"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"1.0"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_FONT"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"FONT_SIZE"</span>:<span class="string">"--1"</span>,</span><br><span class="line">            <span class="string">"FONT_COLOR"</span>:<span class="string">"-FF0000"</span>,</span><br><span class="line">            <span class="string">"FONT_FAMILY"</span>:<span class="string">"-null"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"RUN"</span>,</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"期中考试成绩报告单"</span>,</span><br><span class="line">            <span class="string">"ls"</span>:<span class="string">"绩"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"0.5"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_PARAGRAPH"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"ALIGNMENT"</span>:<span class="string">"CENTER"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"PARAGRAPH"</span>,</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"家长会通知"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"0.5"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_PARAGRAPH"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"ALIGNMENT"</span>:<span class="string">"CENTER"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"PARAGRAPH"</span>,</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"期中考试成绩报告单"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"0.5"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_PARAGRAPH"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"ALIGNMENT"</span>:<span class="string">"-LEFT"</span>,</span><br><span class="line">            <span class="string">"SPACING_BETWEEN"</span>:<span class="string">"--1"</span>,</span><br><span class="line">            <span class="string">"SPACING_AFTER"</span>:<span class="string">"--1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"PARAGRAPH"</span>,</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"时光荏苒"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"score"</span>:<span class="string">"0.5"</span>,</span><br><span class="line">        <span class="string">"knowledge"</span>:<span class="string">"CHECK_PARAGRAPH"</span>,</span><br><span class="line">        <span class="string">"param"</span>:&#123;</span><br><span class="line">            <span class="string">"ALIGNMENT"</span>:<span class="string">"RIGHT"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"location"</span>:&#123;</span><br><span class="line">            <span class="string">"lo"</span>:<span class="string">"PARAGRAPH"</span>,</span><br><span class="line">            <span class="string">"lp"</span>:<span class="string">"身体健康，万事如意！"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"baseFile"</span>:<span class="string">"Word.docx"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"score"</span>:<span class="string">"3.0"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_MAIL_MERGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">      <span class="string">"MERGE_CONTENT_1"</span>:<span class="string">"宋子丹"</span>,</span><br><span class="line">      <span class="string">"MERGE_CONTENT_1"</span>:<span class="string">"郑菁华"</span>,</span><br><span class="line">      <span class="string">"MERGE_CONTENT_1"</span>:<span class="string">"宋子文"</span>,</span><br><span class="line">      <span class="string">"MERGE_CONTENT_1"</span>:<span class="string">"刘小红"</span>,</span><br><span class="line">      <span class="string">"MERGE_CONTENT_1"</span>:<span class="string">"李北冥"</span></span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"正式家长会通知.docx"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"score"</span>:<span class="string">"3.0"</span>,</span><br><span class="line">    <span class="string">"knowledge"</span>:<span class="string">"CHECK_PAGE"</span>,</span><br><span class="line">    <span class="string">"param"</span>:&#123;</span><br><span class="line">      <span class="string">"PAGE_COUNT"</span>:<span class="string">"15"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"baseFile"</span>:<span class="string">"正式家长会通知.docx"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>office</category>
      </categories>
  </entry>
  <entry>
    <title>office/Untitled-1</title>
    <url>/blog/2020/04/29/office/Untitled-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script>{"definitions":{},"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://example.com/root.json","type":"object","title":"JSON 判题规则","required":["score","knowledge","param","baseFile"],"properties":{"score":{"$id":"#/properties/score","type":"string","title":"分值","pattern":"^[1-9]\\d*\\.[0-9]{1}"},"knowledge":{"$id":"#/properties/knowledge","type":"string","title":"知识点编号"},"param":{"$id":"#/properties/param","type":"object","title":"知识点参数对象","required":["attribute1"],"properties":{"attribute1":{"$id":"#/properties/param/properties/attribute1","type":"string","title":"属性值"},"attribute2":{"$id":"#/properties/param/properties/attribute2","type":"string","title":"属性值"},"attribute3":{"$id":"#/properties/param/properties/attribute3","type":"object","title":"The Attribute3 Schema","properties":{"location":{"$id":"#/properties/location","type":"object","title":"定位对象"}}}}},"location":{"$id":"#/properties/location","type":"object","title":"定位元素对象","properties":{"lp":{"$id":"#/properties/param/properties/lp","type":"string","title":"定义参数"},"ls":{"$id":"#/properties/param/properties/ls","type":"string","title":"定义参数"},"lr":{"$id":"#/properties/param/properties/lr","type":"string","title":"定义参数"},"lo":{"$id":"#/properties/param/properties/lo","type":"string","title":"定义参数"}}},"baseFile":{"$id":"#/properties/baseFile","type":"string","title":"文档文件名"}}}]]></content>
      <categories>
        <category>office</category>
      </categories>
  </entry>
  <entry>
    <title>maven/maven多模块构建</title>
    <url>/blog/2020/04/29/maven/maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Maven多模块构建"><a href="#Maven多模块构建" class="headerlink" title="Maven多模块构建"></a>Maven多模块构建</h4><p><code>maven</code>具有继承和聚合的特性。继承特性能抽取各个模块相同的相同的依赖和插件配置等，能够简化pom，同一管理插件和依赖。聚合特性能将多个模块聚合在一起。</p>
<h5 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h5><p>用户可以在一个打包方式为<code>pom</code>的<code>maven</code>项目中使用任意数量的<code>&lt;module&gt;</code>元素来声明要聚合的项目。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>module2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>对于聚合模块其打包方式必须为<code>pom</code>，否则无法构建。</li>
<li>module的值为当前<code>pom</code>文件的相对目录。</li>
</ol>
</blockquote>
<p>聚合项目和其他项目的关系并非一定是父子关系(树形结构)，也可以使用平行目录。如果使用平行目录对应pom也要修改,使其之下正确的模块目录。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../module1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../module2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对应聚合模块，可以删除无关的文件，只需保留pom.xml 文件。</li>
</ul>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
  </entry>
  <entry>
    <title>linux/bash shell命令</title>
    <url>/blog/2020/04/29/linux/bash%20shell%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="bash-shell命令"><a href="#bash-shell命令" class="headerlink" title="bash shell命令"></a>bash shell命令</h4><h4 id="程序管理"><a href="#程序管理" class="headerlink" title="程序管理"></a>程序管理</h4><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>报告单前系统的进程状态</p>
<h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps 选项</span><br></pre></td></tr></table></figure>

<h6 id="选项"><a href="#选项" class="headerlink" title="选项"></a><strong>选项</strong></h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A : 显示所有程序</span><br></pre></td></tr></table></figure>

<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep ssh # ps 与grep 常用组合用法，查找特定进程</span><br><span class="line">ps -C nginx # 通过名字或命令搜索进程</span><br></pre></td></tr></table></figure>

<h4 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4><h5 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h5><p>网络配置工具 </p>
<h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip (选项)(参数)</span><br></pre></td></tr></table></figure>

<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link show # 显示网络接口信息</span><br><span class="line">ip link set eth0 up #开启网卡</span><br><span class="line">ip link set ehh0 down</span><br><span class="line">ip addr show # 显示网卡ip信息</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a>firewall-cmd</h5><p>Linux 上新用的防火墙软件，跟iptables差不多</p>
<h6 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd [选项 ]</span><br></pre></td></tr></table></figure>

<h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装firewalld</span></span><br><span class="line">yum install firewalld firewall-config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动,状态查看,停止,禁用</span></span><br><span class="line">systemctl start|status|disable|stop firewalld</span><br></pre></td></tr></table></figure>



<h6 id="端口管理"><a href="#端口管理" class="headerlink" title="端口管理"></a>端口管理</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开443/TCP端口</span></span><br><span class="line">firewall-cmd --add-port=443/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久打开3690/TCP端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=3690/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 --permanent参数 需要reload一下，临时打开的端口erload后失效</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙,添加的端口可以看到</span></span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/虚拟机运行时数据区</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="java虚拟机运行时数据区"><a href="#java虚拟机运行时数据区" class="headerlink" title="java虚拟机运行时数据区"></a>java虚拟机运行时数据区</h4><pre><code>java虚拟机规范定义了几种程序运行时会使用到的运行时数据区。 这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范（Java SE 7版）》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，pc寄存器、java虚拟机栈、java堆、方法区（运行时常量池也是方法区的一部分）、本地方法栈。</code></pre><p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1568213700549.jpg" alt="运行时数据区"></p>
<p>####程序计数器（Program Counter Register） </p>
<pre><code>java虚拟机可以支持多条线程同时执行，每一条java虚拟机线程都有自己的pc寄存器。在任意时刻，一条java虚拟机线程只会执行一个方法的代码，这个正在执行的方法称为该线程的当前方法(current method)。如果这个方法不是`native`,那么pc寄存器就保存正在执行的**字节码指令的地址**。如果是`native`的方法，pc寄存器存的是undefined。 </code></pre><blockquote>
<p>程序计数器是线程私有的</p>
</blockquote>
<h4 id="java虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#java虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="java虚拟机栈（Java Virtual Machine Stacks）"></a>java虚拟机栈（Java Virtual Machine Stacks）</h4><pre><code>每一条java虚拟机线程都有自己私有的**Java虚拟机栈(Java Virtual Machine stack)**,这个栈与线程同时创建。

**虚拟机栈描述的是Java`方法执行的内存模型`：**每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于**存储局部变量表、操作数栈、动态链接、方法出口等信息。**每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。

**局部变量表主要存放了编译器可知的各种数据类型**（boolean、byte、char、short、int、float、long、double）、**对象引用**（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</code></pre><p>Java虚拟机械可能发生如下异常情况：</p>
<ul>
<li>如果线程请求分配 的栈容量超过Java虚拟机允许的最大容量，Java虚拟机将会抛出一个StackOverflowError异常。</li>
<li>如果Java虚拟机机可以动态扩展， 并且在尝试扩展的时候元法申请到足够的内存 ，或者在创建新的线程时没有足够的内存去创建对应的虚拟机， 那Java虚拟机将会抛出一个OutOfMemoryError异常。</li>
</ul>
<h4 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h4><pre><code>和虚拟机栈所发挥的作用非常相似，区别是： **虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。**与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和</code></pre><p>OutOfMemoryError异常。</p>
<h4 id="Java堆（Java-Heap）"><a href="#Java堆（Java-Heap）" class="headerlink" title="Java堆（Java Heap）"></a>Java堆（Java Heap）</h4><pre><code>Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。**此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。**

Java 堆是垃圾收集器管理的主要区域，因此也被称作**GC堆（Garbage Collected Heap）**.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：在细致一点有：Eden空间、From Survivor、To Survivor空间等。**进一步划分的目的是更好地回收内存，或者更快地分配内存。**</code></pre><h4 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h4><pre><code>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的**类信息、常量、静态变量、即时编译器编译后的代码等数据**。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。（以前很多人把方法区称为永久代，现在JDK1.8中已经用元数据区域取代了永久代）。</code></pre><blockquote>
<p>HotSpot 虚拟机中方法区以前也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p>
</blockquote>
<h4 id="运行时常量池（Runtime-Constant-Pool）"><a href="#运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池（Runtime Constant Pool）"></a>运行时常量池（Runtime Constant Pool）</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量<br>和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。在运行的时候也会有常量产生，s.intern()会把变量放入常量池中</p>
<blockquote>
<p><strong>JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。同时在 jdk 1.8中移除整个永久代，取而代之的是一个叫元空间（Metaspace）的区域</strong></p>
</blockquote>
<h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p>
<p>在JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。</p>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://segmentfault.com/a/1190000016113863" target="_blank" rel="noopener">可能是把Java内存区域讲的最清楚的一篇文章</a> </p>
<p><a href="https://www.jianshu.com/p/3bfea2eda30a" target="_blank" rel="noopener">深入理解Java虚拟机—自动内存管理机制</a></p>
<p><a href="https://blog.csdn.net/qq_26222859/article/details/73135660" target="_blank" rel="noopener">字符串常量池、class常量池和运行时常量池</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/虚拟机字节码执行引擎/方法调用</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h4><p>方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。       ——《深入理解Java虚拟机JVM高级特性与最佳实践（第2版）》周志明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Human man = <span class="keyword">new</span> Man();</span><br><span class="line">Human woman = <span class="keyword">new</span> Woman();</span><br><span class="line">StaticDispatch.sayHello(man);</span><br><span class="line">StaticDispatch.sayHello(woman);</span><br><span class="line">System.out.println(man.getClass().getName());</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1568526175122.jpg" alt="1568526175122.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Human man = <span class="keyword">new</span> Man();</span><br><span class="line">Human woman = <span class="keyword">new</span> Woman();</span><br><span class="line">StaticDispatch.sayHello(man);</span><br><span class="line">StaticDispatch.sayHello((Woman)woman);</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1568526071346.jpg" alt></p>
<blockquote>
<p>虚拟机（准确地说是编译器）在重载时是通过参数的静态类型而不是实际类型作为判定依据的。并且静态类型是编译期可知的，因此，在编译阶段，Javac编译器会根据参数的静态类型决定使用哪个重载版本。</p>
</blockquote>
<p>所有依赖静态类型来定位方法执行版本的分派动作称为静态分派。静态分派的典型应用是方法重载。静态分派发生在编译阶段，因此确定静态分派的动作实际上不是由虚拟机来执行的。另外，编译器虽然能确定出方法的重载版本，<strong>但在很多情况下这个重载版本并不是“唯一的”，往往只能确定一个“更加合适的”版本。</strong></p>
<h4 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxdc.polymorhism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Polymorphism</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"hello animal"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"hello cat"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"hello dog"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">		animal.sayHello();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">		cat.sayHello();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">		dog.sayHello();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Animal cat = <span class="keyword">new</span> Cat();</span><br><span class="line">		Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		cat.sayHello();</span><br><span class="line">		dog.sayHello();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cat.syaHello()和dog.sayHello()的字节码如下</p>
<p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1568532650261.jpg" alt="1568532650261.jpg"></p>
<p>17和22行调用都是常量池中第2项的常量，注释显示了这个常量是Animal.sayHello()的符号引用）完全一样的，但是这两句指令最终执行的目标方法并不相同。原因就需要从invokevirtual指令的多态查找过程开始说起，invokevirtual指令的运行时解析过程大致分为以下几个步骤：</p>
<p>1）找到操作数栈顶的第一个元素所指向的对象的<strong>实际类型</strong>，记作C。</p>
<p>2）如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError异常。</p>
<p>3）否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</p>
<p>4）如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</p>
<p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1568534005692.jpg" alt="1568534005692.jpg"></p>
<p>由于invokevirtual指令执行的第一步就是在运行期确定接收者的实际类型，所以两次调用中的invokevirtual指令把常量池中的类方法符号引用解析到了不同的直接引用上，这个过程就是Java语言中方法重写的本质。我们把这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派。</p>
<h4 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h4><hr>
<p>动态类型语言的关键特征是它的类型检查的主体过程是在运行期而不是编译期，相对的，在编译期就进行类型检查过程的语言（如C++和Java等）就是最常用的静态类型语言。</p>
<p>动态语言变量是没有类型，值是有类型的</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
        <category>虚拟机字节码执行引擎</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/类文件结构</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><p>:memo:</p>
<p>Java虚拟机有自己完善的<a href="https://zh.wikipedia.org/wiki/硬体" target="_blank" rel="noopener">硬体</a>架构，如<a href="https://zh.wikipedia.org/wiki/处理器" target="_blank" rel="noopener">处理器</a>、<a href="https://zh.wikipedia.org/wiki/堆栈" target="_blank" rel="noopener">堆栈</a>、<a href="https://zh.wikipedia.org/wiki/寄存器" target="_blank" rel="noopener">寄存器</a>等，还具有相应的<a href="https://zh.wikipedia.org/wiki/指令" target="_blank" rel="noopener">指令</a>系统。</p>
<p>####class文件格式</p>
<p>所有 Java虚拟机的实现都必须支持两种标准的浮点值集合：单精度浮点数集合和双精度 浮点数集合。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/java类加载机制/虚拟机类加载机制</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="虚拟机的类加载机制"><a href="#虚拟机的类加载机制" class="headerlink" title="虚拟机的类加载机制"></a>虚拟机的类加载机制</h4><p>虚拟机把描述类的数据从<strong>Class文件（不一定是某个class文件，可以是任何形式的二进制字节流）</strong>加载到内存，并对数据进行校验、转换解析和初始化，最终转换为虚拟机可以使用的java类型，这就是虚拟机的类加载机制。</p>
<h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p>类从被加载到虚拟机内存开始，到卸载出内存位置，它的生命周期包括:加载（Loading）、验证(verification)、准备(Preparaton)、解析(Resolution)、初始化(Initialization)、使用和卸载(UnLoading)</p>
<p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1568279230846.jpg" alt="1568279230846.jpg"></p>
<blockquote>
<p>些阶段通常都是互相交叉地混合式进行的，通常会在一个阶段执行的过程中调用、激活另外一个阶段。</p>
<p>其中解析阶段在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）</p>
</blockquote>
<h4 id="加载（Loading）"><a href="#加载（Loading）" class="headerlink" title="加载（Loading）"></a>加载（Loading）</h4><p>在加载阶段，虚拟机需要完成以下3件事情：<br><strong>1）</strong>通过一个类的全限定名来获取定义此类的二进制字节流。<br>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>3）在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>
<p>装载阶段主要是<strong>将java字节码以二进制的方式读入到jvm内存中</strong>，然后将二进制数据流按照字节码规范解析成jvm内部的运行时数据结构。java虚拟机规范只对字节码进行了规范，并没有对内部运行时数据结构进行规定，不同的jvm实现可以采用不同的数据结构，这些运行时数据结构是保存在jvm的方法区中。当一个类的二进制解析完毕后，jvm最终会生成一个java.lang.Class类型的实例对象，通过这个对象可以访问到该类在方法区的内容。</p>
<blockquote>
<p>Class对象比较特殊，它虽然是对象，但是存放在方法区里面.</p>
</blockquote>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>从整体上看，验证阶段大致需要完成以下4个阶段的检验动作：</p>
<ul>
<li><p>文件格式验证</p>
<blockquote>
<p>验证是否以魔数0xCAFEBABE开头,主、次版本号是否在当前虚拟机处理范围之内等等…..,验证字节流是否符合Class文件格式的规范，保证输入的字节流能正确的解析并存储于方法区之内，只有通过了这个阶段的验证后，字节流才会进入内存的方法区进行存储，后面3个验证阶段全部是基于方法区的存储结构进行的。</p>
</blockquote>
</li>
<li><p>元数据验证</p>
<blockquote>
<p>对字节码描述的信息进行语义分析，以保证其描述的信息符合java语义规范的要求。如这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</p>
</blockquote>
</li>
<li><p>字节码验证</p>
<blockquote>
<p>通过<strong>数据流和控制流分析</strong>，确定程序语义是合法的符合逻辑的，对类的方法进行校验分析，确保被验证类的方法在运行时不会做出危害虚拟机安全的事件。</p>
</blockquote>
</li>
<li><p>符号引用验证</p>
<blockquote>
<p>发生在虚拟机将符合引用转化成直接引用的时候，动作发生在连接的第三个阶段<strong>解析</strong>，验证对类本身以外(常量池中的各种符号引用)的信息进行匹配性校验。如验证符号引用中通过字符串描述的全限定名是否能找到对应的类。</p>
</blockquote>
</li>
</ul>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>正式为类变量<strong>分配内存</strong>并设置<strong>类变量初始值的阶段</strong>，这些变量所使用的内存都将在方法区中进行分配。</p>
<ul>
<li><p>内存分配只包括类变量(static)，而不包括实例变量，实例变量将会随着对象一起分配在java堆中</p>
</li>
<li><p>通常情况下数据类型赋值为零值，除非使用了<strong>static final标示一个变量，才会在这一阶段直接赋值。</strong></p>
<blockquote>
<p>public static int value = 10;//准备阶段过后初始值为0，而不是10，public static final int value = 10；//准备阶段过后初始值为10。主要是分配内存。</p>
</blockquote>
</li>
</ul>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4>]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
        <category>java类加载机制</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/java垃圾回收/垃圾对象判定</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/%E5%9E%83%E5%9C%BE%E5%AF%B9%E8%B1%A1%E5%88%A4%E5%AE%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效<br>时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>
<h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4>]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
        <category>java垃圾回收</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/java垃圾回收/垃圾回收算法</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><h4 id="回收器"><a href="#回收器" class="headerlink" title="回收器"></a>回收器</h4>]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
        <category>java垃圾回收</category>
      </categories>
  </entry>
  <entry>
    <title>java/java虚拟机/JVM参数与工具</title>
    <url>/blog/2020/04/29/java/java%E8%99%9A%E6%8B%9F%E6%9C%BA/JVM%E5%8F%82%E6%95%B0%E4%B8%8E%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h5 id="Java启动参数共分为三类；"><a href="#Java启动参数共分为三类；" class="headerlink" title="Java启动参数共分为三类；"></a>Java启动参数共分为三类；</h5><ul>
<li>其一是标准参数（-），所有的JVM实现都必须实现这些参数的功能，而且向后兼容；</li>
<li>其二是非标准参数（-X），默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容；</li>
<li>其三是非Stable参数（-XX），此类参数各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用；</li>
</ul>
<table>
<thead>
<tr>
<th align="center">参数及默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-verbose:gc</td>
<td align="center">表示输出虚拟机中GC的详细情况</td>
</tr>
<tr>
<td align="center">-Xms</td>
<td align="center">设置JVM初始堆内内存</td>
</tr>
<tr>
<td align="center">-Xmx</td>
<td align="center">设置JVM最大堆内内存</td>
</tr>
<tr>
<td align="center">-Xmn</td>
<td align="center">堆内新生代内存的大小</td>
</tr>
<tr>
<td align="center">-Xss</td>
<td align="center">栈的大小</td>
</tr>
<tr>
<td align="center">-XX:SurvivorRatio=8</td>
<td align="center">Eden区与Survivor区的大小比值</td>
</tr>
<tr>
<td align="center">-XX:MaxTenuringThreshold</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-XX:+PrintGCDetails</td>
<td align="center">打印内存回收日志</td>
</tr>
<tr>
<td align="center">-XX:+HeapDumpOnOutOfMemoryError</td>
<td align="center">导出内存溢出的堆栈信息(hprof)</td>
</tr>
<tr>
<td align="center">-XX:TraceClassLoading</td>
<td align="center">查看类的加载</td>
</tr>
</tbody></table>
<h4 id="可视化监控工具"><a href="#可视化监控工具" class="headerlink" title="可视化监控工具"></a>可视化监控工具</h4><ol>
<li>Jconsole</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>java虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>java/java基础/java容器/java容器</title>
    <url>/blog/2020/04/29/java/java%E5%9F%BA%E7%A1%80/java%E5%AE%B9%E5%99%A8/java%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ul>
<li>get方法调用getNode()，如果返回节点为<code>null</code>则返回<code>null</code>，否则返回节点的值<code>e.value</code> :notes:getOrDefault</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">    Node&lt;K,V&gt; e;    </span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>键必须是唯一的。不能对同一个键存放两个值。如果对同一个键两次调用put方法，第二个值就会取代第一个值。</li>
<li>put将返回用这个键参数存储的上一个值</li>
</ul>
<h4 id="HashMap源码"><a href="#HashMap源码" class="headerlink" title="HashMap源码"></a>HashMap源码</h4><p>HashMap采用哈希算法实现，是Map接口最常用的实现类。 底层采用了哈希表存储数据。</p>
<h5 id="HashMap主要成员变量"><a href="#HashMap主要成员变量" class="headerlink" title="HashMap主要成员变量"></a>HashMap主要成员变量</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* This map usually acts as a binned (bucketed) hash table, but</span></span><br><span class="line"><span class="comment">    * when bins get too large, they are transformed into bins of</span></span><br><span class="line"><span class="comment">    * TreeNodes, each structured similarly to those in</span></span><br><span class="line"><span class="comment">    * java.util.TreeMap.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     * 核心数组默认初始大小为16（必须是2的整数幂）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line">    <span class="comment">/** ... */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     * 负载因子（核心数组被占用超过0.75启动扩容(大约两倍扩容)）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">     * necessary.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">int</span> threshold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">    	<span class="comment">/** ... **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数组结构的每一个格称为<strong>桶</strong>(bucket)。capacity即为桶的数量(The <i>capacity</i> is the number of buckets in the hash table)。size为键值对(每一個鍵值對也叫做<em>Entry</em>)的个数。</p>
<p>变量集合的时间是和桶的数量和键值对的个数是成比例的。如果初始capacity太大会影响迭代效率(Iteration over collection views requires time proportional to the “capacity” of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.)</p>
</blockquote>
<blockquote>
<p>链接：<a href="https://www.nowcoder.com/questionTerminal/95e4f9fa513c4ef5bd6344cc3819d3f7来源：牛客网" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/95e4f9fa513c4ef5bd6344cc3819d3f7来源：牛客网</a></p>
<p>​        在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。 </p>
<p>​         原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p>
</blockquote>
<h5 id="HashMap重要方法深度解析"><a href="#HashMap重要方法深度解析" class="headerlink" title="HashMap重要方法深度解析"></a><strong>HashMap重要方法深度解析</strong></h5><h6 id="1、构造方法"><a href="#1、构造方法" class="headerlink" title="1、构造方法"></a><strong>1、构造方法</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap()    <span class="comment">//无参构造方法，threshold为0</span></span><br><span class="line">HashMap(<span class="keyword">int</span> initialCapacity)  <span class="comment">//指定初始容量的构造方法 会调用HashMap(initialCapacity, DEFAULT_LOAD_FACTOR)</span></span><br><span class="line">HashMap(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor) <span class="comment">//指定初始容量和负载因子</span></span><br><span class="line">HashMap(Map&lt;? extends K,? extends V&gt; m)  <span class="comment">//指定集合，转化为HashMap</span></span><br></pre></td></tr></table></figure>

<p>HashMap提供了四个构造方法，构造方法中 ，依靠第三个方法来执行的，<strong>但是前三个方法都没有进行数组的初始化操作，即使调用了构造方法此时存放HaspMap中数组元素的table表长度依旧为0</strong> 。在第四个构造方法中调用了inflateTable()方法完成了table的初始化操作，并将m中的元素添加到HashMap中。</p>
<ul>
<li>HashMap#tableSizeFor()<br>源码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">这个方法被调用的地方：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**省略此处代码**/</span></span><br><span class="line">    <span class="comment">/** initialCapacity 不能&lt;0, loadFactor 不能&lt;=0 ,否则抛出异常**/</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可以看到，当在实例化HashMap实例时，如果给定了initialCapacity，<strong>由于HashMap的capacity都是2的幂，因此这个方法用于找到大于等于initialCapacity的最小的2的幂</strong>（initialCapacity如果就是2的幂，则返回的还是这个数）。</p>
<p>下面分析这个算法：<br>首先，为什么要对cap做减1操作。int n = cap - 1;<br>这是为了防止，cap已经是2的幂。如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回时再加一,capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看。<br>下面看看这几个无符号右移操作：<br>如果n这时为0了（经过了cap-1之后），则经过后面的几次无符号右移依然是0，最后返回的capacity是1（最后有个n+1的操作）。<br>这里只讨论n不等于0的情况。<br>第一次右移</p>
<p><code>n |= n &gt;&gt;&gt; 1;</code></p>
<p>由于n不等于0，则n的二进制表示中总会有一bit为1，这时考虑最高位的1。通过无符号右移1位，则将最高位的1右移了1位，再做或操作，使得n的二进制表示中与最高位的1紧邻的右边一位也为1，如000011xxxxxx。<br>第二次右移</p>
<p><code>n |= n &gt;&gt;&gt; 2;</code></p>
<p>注意，这个n已经经过了n |= n &gt;&gt;&gt; 1; 操作。假设此时n为000011xxxxxx ，则n无符号右移两位，会将最高位两个连续的1右移两位，然后再与原来的n做或操作，这样n的二进制表示的高位中会有4个连续的1。如00001111xxxxxx 。<br>第三次右移</p>
<p><code>n |= n &gt;&gt;&gt; 4;</code><br>这次把已经有的高位中的连续的4个1，右移4位，再做或操作，这样n的二进制表示的高位中会有8个连续的1。如00001111 1111xxxxxx 。<br>以此类推<br>注意，容量最大也就是32bit的正数，因此最后n |= n &gt;&gt;&gt; 16; ，最多也就32个1，但是这时已经大于了MAXIMUM_CAPACITY ，所以取值到MAXIMUM_CAPACITY 。<br><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1569166420999.jpg" alt="1569166420999.jpg"></p>
<p>当n=0时，右移后还是0，但n=-1时，右移后还是-1(补码为1……111)</p>
<p>注意，得到的这个capacity却被赋值给了threshold。</p>
<p><code>this.threshold = tableSizeFor(initialCapacity);</code></p>
<p>开始以为这个是个Bug，感觉应该这么写：</p>
<p><code>this.threshold = tableSizeFor(initialCapacity) * this.loadFactor;</code><br>这样才符合threshold的意思（当HashMap的size到达threshold这个阈值时会扩容）。<br><a href>但是，请注意，在构造方法中，并没有对table这个成员变量进行初始化，table的初始化被推迟到了put方法中，在put方法中会对threshold重新计算，</a></p>
<blockquote>
<p>版权声明：本文为CSDN博主「fan2012huan」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/fan2012huan/article/details/51097331" target="_blank" rel="noopener">https://blog.csdn.net/fan2012huan/article/details/51097331</a></p>
</blockquote>
<h6 id="2、添加方法"><a href="#2、添加方法" class="headerlink" title="2、添加方法"></a><strong>2、添加方法</strong></h6><ul>
<li>当调用<code>put()</code>时，如下方式设定了初始容量。</li>
<li>调用 <code>putVal(hash(key), key, value, false, true)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>hash(key)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key为null,在核心数组的第一个位置</span></span><br><span class="line">    <span class="comment">// h = key.hashCode()去hashCode</span></span><br><span class="line">    <span class="comment">// h &gt;&gt;&gt; 16</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>在putVal()中，进入第一个if，调用resize(),返回核心数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/** .... **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>resize()</p>
<p> HashMap扩容可以分为三种情况：</p>
<p>第一种：使用默认构造方法初始化HashMap。从前文可以知道HashMap在一开始初始化的时候会返回一个空的table，并且thershold为0。因此第一次扩容的容量为默认值DEFAULT_INITIAL_CAPACITY也就是16。同时threshold = DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR = 12。</p>
<p>第二种：指定初始容量的构造方法初始化HashMap。那么从下面源码可以看到初始容量会等于threshold，接着threshold = 当前的容量（threshold） * DEFAULT_LOAD_FACTOR。</p>
<p>第三种：HashMap不是第一次扩容。如果HashMap已经扩容过的话，那么每次table的容量以及threshold量为原有的两倍。</p>
<blockquote>
<p>版权声明：本文为CSDN博主「青元子」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u010890358/article/details/80496144" target="_blank" rel="noopener">https://blog.csdn.net/u010890358/article/details/80496144</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold; <span class="comment">//带参数构造函数为tableSizeFor(initialCapacity)，无参数为0</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;<span class="comment">//已经初始化核心数组</span></span><br><span class="line">            <span class="comment">// 超过最大容量</span></span><br><span class="line">            <span class="comment">// 原数组长度大于最大容量(1073741824) 则将threshold设Integer.MAX_VALUE=2147483647</span></span><br><span class="line">			<span class="comment">// 接近MAXIMUM_CAPACITY的两倍</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有超过最大容量</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment">// 核心数组还没初始化，带参构造函数，threshold属性已经被赋值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="comment">//  核心数组还没初始化，无参构造函数，threshold属性还未被赋值</span></span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当newThr为0时，</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            <span class="comment">// //在newCap 与ft 小于最大容量时(不满足时不讨论)，执行  newThr  = ft</span></span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">         <span class="comment">/** ... **/</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="常被问到的HashMap和Hashtable的区别"><a href="#常被问到的HashMap和Hashtable的区别" class="headerlink" title="常被问到的HashMap和Hashtable的区别**"></a>常被问到的HashMap和Hashtable的区别**</h4><h5 id="1、线程安全"><a href="#1、线程安全" class="headerlink" title="1、线程安全"></a><strong>1、线程安全</strong></h5><p>两者最主要的区别在于Hashtable是线程安全，而HashMap则非线程安全。</p>
<p>Hashtable的实现方法里面都添加了synchronized关键字来确保线程同步，因此相对而言HashMap性能会高一些，我们平时使用时若无特殊需求建议使用HashMap，在多线程环境下若使用HashMap需要使用Collections.synchronizedMap()方法来获取一个线程安全的集合。</p>
<p><strong>Note：</strong></p>
<p>Collections.synchronizedMap()实现原理是Collections定义了一个SynchronizedMap的内部类，这个类实现了Map接口，在调用方法时使用synchronized来保证线程同步,当然了实际上操作的还是我们传入的HashMap实例，简单的说就是Collections.synchronizedMap()方法帮我们在操作HashMap时自动添加了synchronized来实现线程同步，类似的其它Collections.synchronizedXX方法也是类似原理。</p>
<h5 id="2、针对null的不同"><a href="#2、针对null的不同" class="headerlink" title="2、针对null的不同"></a><strong>2、针对null的不同</strong></h5><p>HashMap可以使用null作为key，而Hashtable则不允许null作为key<br>虽说HashMap支持null值作为key，不过建议还是尽量避免这样使用，因为一旦不小心使用了，若因此引发一些问题，排查起来很是费事。<br><strong>Note：</strong>HashMap以null作为key时，总是存储在table数组的第一个节点上。</p>
<h5 id="3、继承结构"><a href="#3、继承结构" class="headerlink" title="3、继承结构"></a><strong>3、继承结构</strong></h5><p>HashMap是对Map接口的实现，HashTable实现了Map接口和Dictionary抽象类。</p>
<h5 id="4、初始容量与扩容"><a href="#4、初始容量与扩容" class="headerlink" title="4、初始容量与扩容"></a><strong>4、初始容量与扩容</strong></h5><p>HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75。</p>
<p>HashMap扩容时是当前容量翻倍即:capacity<em>2，Hashtable扩容时是容量翻倍+1即:capacity</em>2+1。</p>
<h5 id="5、两者计算hash的方法不同"><a href="#5、两者计算hash的方法不同" class="headerlink" title="5、两者计算hash的方法不同"></a><strong>5、两者计算hash的方法不同</strong></h5><p>Hashtable计算hash是直接使用key的hashcode对table数组的长度直接进行取模</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br></pre></td></tr></table></figure>

<p>HashMap计算hash对key的hashcode进行了二次hash，以获得更好的散列值，然后对table数组长度取摸。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line"><span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">        <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">        <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<hr>
<p>Iterator 迭代器，它是java集合的顶层接口（不包括map系列的集合，map接口是map 系列集合的顶层接口）核心方法如下：</p>
<p> boolean hasNext();<br> E next();<br> void remove()<br> forEachRemaining(Consumer super E action)</p>
<p>如果想要查看集合中的所有元素，就请求一个迭代器，并在hasNext返回true时反复地调用next方法<br>“for each”循环可以与任何实现了Iterable接口的对象一起工作，这个接口只包含一个抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IteratorT <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer <span class="keyword">super</span> T action)</span> </span>&#123;  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> SpliteratorT <span class="title">spliterator</span><span class="params">()</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p> Spliterator是一个可分割迭代器(splitable iterator)，可以和iterator顺序遍历迭代器一起看。Spliterator就是为了并行遍历元素而设计的一个迭代器，jdk1.8中的集合框架中的数据结构都默认实现了spliterator<br>可以调用forEachRemaining方法并提供一个lambda表达式（它会处理一个元素）</p>
<p>Iterator接口的remove方法将会删除上次调用next方法时返回的元素。</p>
<p>如果想删除两个相邻的元素，不能直接地这样调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">it.remove()</span><br><span class="line">it.remove()  Error</span><br></pre></td></tr></table></figure>


<p>  collection E extends Iterable E</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IterableT</span> </span>&#123;</span><br><span class="line">    <span class="function">IteratorT <span class="title">iterator</span><span class="params">()</span></span>; 抽象方法,返回一个迭代器</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer <span class="keyword">super</span> T action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t  <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Java类库提供了一个类AbstractCollection，它将基础方法size和iterator抽象化了。此时，一个具体的集合类可以扩展AbstractCollection类了。现在要由具体的集合类提供iterator方法和size()方法</p>
<p>List 接口(Ordered Collection)是Collection 接口的三个子接口（List、Set、Queue）之一。它是各种具体列表（ArrayList、LinkedList，Vector-线程安全）的公共接口。它们共同的特点是可以通过索引访问聚集中的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList</span><br><span class="line">ListString list = <span class="keyword">new</span> ArrayListString();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line">index  size  index  <span class="number">0</span></span><br><span class="line">[<span class="number">0</span>,size]</span><br><span class="line">list.add(<span class="number">1</span>,)其他往后移动</span><br><span class="line">list.set(<span class="number">1</span>,)修改元素</span><br><span class="line">list.get(<span class="number">1</span>)通过索引获取元素</span><br><span class="line">list.indexOf(Object)返回第一次出现的元素索引</span><br><span class="line">list.lastIndexOf(Object)返回最后一次出现的索引</span><br></pre></td></tr></table></figure>
<p>LinkedList。。在Java程序设计语言中，所有链</p>
<p>表实际上都是双向链接的（doubly linked）——</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdk8 为双向无头结点链表</span><br></pre></td></tr></table></figure>
<h5 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h5><p>集合有两个基本接口：Collection和Map。由于映射包含键值对，所以要用put方法来插入值。要从集合读取元素，可以用迭代器访问元素。不过，从映射中读取值则要使用get方法：</p>
<p>HashMap采用哈希算法实现，是Map接口最常用的实现类。<br>Map就是用来存储“键(key)-值(value) 对”的。 Map类中存储的“键值对”通过键来标识，所以“键对象”不能重复。<br>Map 接口的实现类有HashMap、TreeMap、HashTable、Properties等</p>
<h6 id="HashMap与HashTable的区别"><a href="#HashMap与HashTable的区别" class="headerlink" title="HashMap与HashTable的区别"></a>HashMap与HashTable的区别</h6><ol>
<li>HashMap 线程不安全，效率高。允许key或value为null。</li>
<li>HashTable 线程安全，效率低。不允许key或value为null。</li>
</ol>
<p><a href="httpsblog.csdn.netqq_38182963articledetails78940047">httpsblog.csdn.netqq_38182963articledetails78940047</a></p>
<h6 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h6><p>TreeMap和HashMap实现了同样的接口Map，因此，用法对于调用者来说没有区别。HashMap效率高于TreeMap;在需要排序的Map时才选用TreeMap。<br> 有序指的是存储顺序与添加顺序相同，并且可以通过下标访问，List就是这样。无序刚好相反，指的是存储顺序与添加顺序无关，没有下标，当然也不可能通过下标访问，Set就是如此。有序、无序是指在进行插入操作时，插入位置的顺序性先插的位置在前，后插的位置在后，则为有序，反之无序。实现了List接口的集合类全部有序，如ArrayList、LinkedList<br>实现了Set接口的集合类中，HashSet无序，TreeSet排序实现了Map接口的集合类中，HashMap无序，TreeMap排序</p>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p> Collection 只是一个接口, 表示是一组集合, 没有特点 (是否排序, 是否去重)。而Set 是有特点的，那就是 唯一，可以理解为： 不包含重复元素的 collection。对于接口, Set 接口，本身可以不需要重新定义这个接口,（例如：Set和 Collection 里面的add 接口定义 是一样的）， 但是 ，重新定义， 可以写上自己 特殊的注释，对于这种接口层次的重新定义, 我觉得除了可以加自己的特殊注释外, 也可以一目了然的知道 这个接口的方法; 尤其对于JDK，并且是常用的接口,如果不写注释，并且不是那么常用的接口，可以省略 ，继承父接口方法即可。</p>
<p>Set接口继承自Collection，Set接口中没有新增方法，方法和Collection保持完全一致。我们在前面通过List学习的方法，在Set中仍然适用。因此，学习Set的使用将没有任何难度。      Set容器特点：无序、不可重复。无序指Set中的元素没有索引，我们只能遍历查找;不可重复指不允许加入重复的元素。更确切地讲，新元素如果和Set中某个元素通过equals()方法对比为true，则不能加入;甚至，Set中也只能放入一个null元素，不能多个。      Set常用的实现类有：HashSet、TreeSet等，我们一般使用HashSet。</p>
<h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">变量list 和set都一样</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator i = list.iterator();i.hasNext();) &#123;</span><br><span class="line">        System.out.println(i.next());</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line"> 遍历map <span class="number">1</span></span><br><span class="line"> <span class="number">1</span>.获取set</span><br><span class="line">SetEntryString, String ss = map.entrySet();</span><br><span class="line">获取Iterator</span><br><span class="line">IteratorEntry iterator = ss.Iterator()</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Entry e = iterator.next()</span><br><span class="line">    e.getKey();</span><br><span class="line">    e.getValue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">遍历map <span class="number">2</span></span><br><span class="line">SetString ss = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (IteratorString iterator = ss.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            System.out.println(key + -- + map.get(key));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><a href="httpwww.sxt.cnJava_jQuery_in_actionnine-ergodicset.html">遍历集合的方法</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>java基础</category>
        <category>java容器</category>
      </categories>
  </entry>
  <entry>
    <title>java/java反射/反射</title>
    <url>/blog/2020/04/29/java/java%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><p>Java 反射机制在程序<strong>运行时</strong>，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 <strong>动态的获取信息</strong> 以及 <strong>动态调用对象的方法</strong> 的功能称为 <strong>java 的反射机制</strong>。</p>
<blockquote>
<p>关键词：运行时、动态获取信息、动态调用对象的方法。</p>
</blockquote>
<ul>
<li><code>newInstance</code>方法调用默认的构造器（没有参数的构造器）初始化新创建的对象。如果这个类没有默认的构造器，就会抛出一个异常。带参的构造函数，必须使用Constructor类中的<code>newInstance</code>方法。</li>
<li>其中最主要的三个类 <code>Field</code>、<code>Method</code> 和 <code>Constructor</code> 分别用于描述类的域、方法和构造器</li>
<li>在<code>java.lang.reflect</code>包中有三个类Field、Method和Constructor分别用于描述类的域、方法和构造器。这三个类都有一个叫做<code>getName</code>的方法，用来返回项目的名称。</li>
<li>Field类有一个<code>getType</code>方法，用来返回域所属类型的Class对象。</li>
<li>这三个类还有一个叫做<code>getModifiers</code>的方法，它将返回一个整型数值，用不同的位开关描述public和static这样的修饰符使用状况。可以利用java.lang.reflect包中的<code>Modifier</code>类的静态方法分析<code>getModifiers</code>返回的整型数值。例如，可以使用Modifier类中的<code>isPublic</code>、<code>isPrivate</code>或<code>isFinal</code>判断方法或构造器是否是public、private或final。另外，还可以利用<code>Modifier.toString</code>方法将修饰符打印出来。</li>
<li>Class类的对象的isArray()等方法可以判断该类的类型</li>
<li>Class类中的getFields、getMethods和getConstructors方法将分别返回类提供的<strong>public</strong>域、方法和构造器数组，其中包括<strong>超类的公有成员</strong>。Class类的getDeclare* 只能在本类获取信息，不包括超类。</li>
<li><code>java.lang.Class.getComponentType()</code> 方法返回数组类型的Class。如果这个类并不代表一个数组类，此方法返回null。<code>java.lang.Class.getComponentType().isPrimitive</code>用来判断指定的<a href="https://www.baidu.com/s?wd=Class类&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">Class类</a>是否为一个基本类型。</li>
<li><code>java.lang.reflect.Array.get(Object array，int index)</code>方法返回指定数组对象中的索引组件的值。 如果该对象具有原始类型，则该值将自动包装在对象中原文出自。</li>
<li>两个setAccessible方法设置访问权限。<code>AccessibleObject.setAccessible(AccessibleObject[] array, boolean flag)</code>使用单一安全性检查（为了提高效率）为一组对象设置 <code>accessible</code> 标志的便捷方法。<code>setAccessible(boolean flag)</code>   将此对象的 <code>accessible</code> 标志设置为指示的布尔值</li>
</ul>
<h4 id="查看数据域的内容"><a href="#查看数据域的内容" class="headerlink" title="查看数据域的内容"></a>查看数据域的内容</h4><p>对象域的关键方法是Field类中的get方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">"user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 获取字段</span></span><br><span class="line">        Field age =  user.getClass().getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">// age.setAccessible(true);</span></span><br><span class="line">        <span class="comment">// 获取字段的内容，返回object,user是某个包含f域的类的对象</span></span><br><span class="line">        Object o = age.get(user);</span><br><span class="line">        <span class="keyword">int</span> anInt = age.getInt(user);</span><br><span class="line">        age.set(user,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>obj是某个包含f域的类的对象，f.get（obj）将返回一个对象，其值为obj域的当前值</p>
<p><strong>由于age是一个私有域，所以get方法将会抛出一个IllegalAccessException</strong>。如果一个Java程序没有受到安全管理器的控制，就可以覆盖访问控制。为了达到这个目的，需要调用Field、Method或Constructor对象的setAccessible方法。Java中数值类型不是对象，可以使用Field类中的getDouble、getInt方法。</p>
</blockquote>
<p>在Method类中有一个invoke方法，它允许调用包装在当前Method对象中的方法。invoke方法是：</p>
<p><code>public Object invoke(Object obj, Object... args)</code></p>
<p>第一个参数是隐式参数，其余的对象提供了显式参数（在Java SE 5.0以前的版本中，必须传递一个对象数组，如果没有显式参数就传递一个null）。对于静态方法，第一个参数可以被忽略，即可以将它设置为null。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>【1】<a href="https://juejin.im/post/598ea9116fb9a03c335a99a4" target="_blank" rel="noopener">Java 反射由浅入深 | 进阶必备</a></p>
<p>【2】</p>
]]></content>
      <categories>
        <category>java</category>
        <category>java反射</category>
      </categories>
  </entry>
  <entry>
    <title>java/java动态代理</title>
    <url>/blog/2020/04/29/java/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><hr>
<p>给某一个对象提供一个代理对象，让代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>blog/需求分析</title>
    <url>/blog/2020/04/29/blog/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><h5 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h5><ol>
<li><p>界面好看</p>
</li>
<li><p>简洁</p>
</li>
<li><p>方便查看博客</p>
</li>
<li><p>有创意</p>
</li>
<li><p>可以看有道云笔记，印象笔记，腾讯云笔记</p>
<p>用例图:</p>
</li>
</ol>
<h5 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h5><pre><code>1. 管理员登录管理，集成微信登录
2. 可以上传博客和基本的增删改查</code></pre><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><h5 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h5><p>#####数据库ER 图</p>
<h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>First, add the MySQL Yum repository to your system’s repository list. Follow these steps:</p>
<ol>
<li>Go to the download page for MySQL Yum repository at <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a>.</li>
<li>Select and download the release package for your platform.</li>
<li>Install the downloaded release package with the following command,</li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>algorithms/排序/快速排序</title>
    <url>/blog/2020/04/29/algorithms/%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><strong>快速排序</strong>（英语：Quicksort），又称<strong>划分交换排序</strong>（partition-exchange sort），简称<strong>快排</strong>，一种<a href="https://zh.wikipedia.org/wiki/排序算法" target="_blank" rel="noopener">排序算法</a>，最早由<a href="https://zh.wikipedia.org/wiki/東尼·霍爾" target="_blank" rel="noopener">东尼·霍尔</a>提出。在平均状况下，排序$n$个项目要$O(nlogn)$（<a href="https://zh.wikipedia.org/wiki/大O符号" target="_blank" rel="noopener">大O符号</a>）次比较。在最坏状况下则需要$O(n^2)$次比较，但这种状况并不常见。快速排序是一种分治的排序算法。快速排序通过选取一个元素，称为“基准”（pivot）。然后通过“分割”，重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面。这样就可以排定一个元素，并切分数组。然后使左右子数组有序，整个数组就序</p>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ol>
<li>选取一个元素作为“基准”，即那个将被排定的元素。一般选取第一个。</li>
<li>从数组左端向右开始扫描找一个大于等于基准的数，如果找到记录位置，换右边扫描。</li>
<li>左端停止后，右端开始向左扫描找一个小于基准的数。然后交换着两个数。</li>
<li>左右交替扫描直到左右指针相遇</li>
</ol>
]]></content>
      <categories>
        <category>algorithms</category>
        <category>排序</category>
      </categories>
  </entry>
  <entry>
    <title>algorithms/排序/归并排序</title>
    <url>/blog/2020/04/29/algorithms/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h5 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h5><ol>
<li>递归地将一个数组不断分成两半分别排序<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</li>
<li><h1 id="然后-递归地-将两个有序的数组归并成一个更大的有序数组"><a href="#然后-递归地-将两个有序的数组归并成一个更大的有序数组" class="headerlink" title="然后(递归地)将两个有序的数组归并成一个更大的有序数组"></a>然后(递归地)将两个有序的数组<strong>归并</strong>成一个更大的有序数组</h1></li>
<li>然后递归地将两个有序的数组<strong>归并</strong>成一个更大的有序数组<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>86b7659abece8e445f157d243c30ba0eb7b8b217</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<h5 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h5><ol>
<li>先归并微小是数组，然后在成对的归并得到是子数组</li>
<li>每个元素可以看为大小为1的数组，然后归并成两个，归并成四个，八个一直下去</li>
</ol>
<h5 id="原地归并方法"><a href="#原地归并方法" class="headerlink" title="原地归并方法"></a>原地归并方法</h5><p><strong>问题</strong><br>对于一个数组<code>a[lo..hi]</code>，将它两个子有序数组<code>a[lo..mid]</code>和<code>a[mid+1..hi]</code>归并成一个有序数组并将结果存放在数组<code>a[lo..hi]</code>中。</p>
<p><strong>思路</strong></p>
<ol>
<li><p>先复制所有的元素到aux[]中。</p>
</li>
<li><p>循环从aux[]的左右两个子数组<code>aux[lo..mid]</code>和<code>aux[mid+1..hi]</code>中取最小的元素到数组a中</p>
</li>
<li><p>选取条件：</p>
<ul>
<li><p>先判断左半边或者右半边是否取完,因为左右子数组已经排序，如果有一边已经取完，直接取另一边的元素(左边用尽,取右边的元素;右边用尽,取左边的元素)</p>
</li>
<li><p>如果子数组都没有取完，判断左边数组的当前元素和右边数组的当前元素，那个小就取那个元素</p>
</li>
</ul>
</li>
</ol>
<p><strong>原地归并代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原地归并方法,将a[lo..mid] 和 a[mid+1..hi]归并</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 要归并的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo 左边数组第一个值的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid 左边数组最后一个值的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hi 右边数组最后一个值的索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k&lt;=hi; k++) &#123;</span><br><span class="line">        <span class="comment">//将a[lo..hi]复制到aux[lo..hi]</span></span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 归并回到a[lo..hi]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k&lt;=hi; k++) &#123;</span><br><span class="line">        <span class="comment">/** 左边数组取完*/</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid)&#123; a[k] = aux[j++]; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123; a[k] = aux[i++]; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j],aux[i])) &#123; a[k] = aux[j++]; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; a[k] = aux[i++]; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="自顶向下的归并排序"><a href="#自顶向下的归并排序" class="headerlink" title="自顶向下的归并排序"></a>自顶向下的归并排序</h5><h5 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h5>]]></content>
      <categories>
        <category>algorithms</category>
        <category>排序</category>
      </categories>
  </entry>
  <entry>
    <title>algorithms/字符串/串的模式匹配</title>
    <url>/blog/2020/04/29/algorithms/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E4%B8%B2%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="Knuth-Morris-Pratt子串查找算法"><a href="#Knuth-Morris-Pratt子串查找算法" class="headerlink" title="Knuth-Morris-Pratt子串查找算法"></a>Knuth-Morris-Pratt子串查找算法</h4><p>Knuth-Morris-Pratt (KMP) 基本思想是，当出现不匹配的时候，能够利用已知的一部分文本避免指针回退到这些文本之前。 KMP 算法的关键就是，如何判断模式指针回退的位数。 </p>
<h4 id="基于Next-数组的KMP"><a href="#基于Next-数组的KMP" class="headerlink" title="基于Next[]数组的KMP"></a>基于Next[]数组的KMP</h4><h4 id="基于有限状态机的KMP"><a href="#基于有限状态机的KMP" class="headerlink" title="基于有限状态机的KMP"></a>基于有限状态机的KMP</h4><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://donche.github.io/2017/06/24/KMP.html" target="_blank" rel="noopener">KMP字符串查找算法的两种实现</a></p>
]]></content>
      <categories>
        <category>algorithms</category>
        <category>字符串</category>
      </categories>
  </entry>
  <entry>
    <title>algorithms/algorithms</title>
    <url>/blog/2020/04/29/algorithms/algorithms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h2 id="散列表"><a href="#散列表" class="headerlink" title=" 散列表"></a> 散列表</h2><p>:earth_asia: <strong>散列表</strong>（<strong>Hash table</strong>，也叫<strong>哈希表</strong>），是根据<a href="https://zh.wikipedia.org/wiki/鍵" target="_blank" rel="noopener">键</a>（Key）而直接访问在内存存储位置的<a href="https://zh.wikipedia.org/wiki/数据结构" target="_blank" rel="noopener">数据结构</a>。也就是说，它通过计算一个关于键值的函数，将所需查询的数据<a href="https://zh.wikipedia.org/wiki/映射" target="_blank" rel="noopener">映射</a>到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做<a href="https://zh.wikipedia.org/wiki/散列函数" target="_blank" rel="noopener">散列函数</a>，存放记录的数组称做<strong>散列表</strong>。</p>
<blockquote>
<p>使用散列的查找算法分两步。第一步是用散列函数将查找的键转化为数组索引。如果有冲突，散列查找的第二步就是处理碰撞冲突</p>
</blockquote>
<h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>:earth_asia:<strong>散列函数</strong>（英语：Hash function）又称<strong>散列算法</strong>、<strong>哈希函数</strong>，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该<a href="https://zh.wikipedia.org/wiki/函数" target="_blank" rel="noopener">函数</a>将数据打乱混合，重新创建一个叫做<strong>散列值</strong>（hash values，hash codes，hash sums，或hashes）的指纹。:</p>
<h2 id="除留余法"><a href="#除留余法" class="headerlink" title="除留余法  "></a>除留余法  </h2><p>将整数散列最常用的方法是除留余法。选择大小为<strong>素数</strong>M的数组，对于任意正整数k,计算<code>k%M</code><br>键为0~1之间的实数，将键表示为二进制数后在使用除留余法(java就是这么做的)。<br>字符串也可以使用除留余法。一种叫Horner方法的经典算法用N次乘法、加法和取余来计算一个字符串的散列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">String s = <span class="string">"nanbnddgadgnnnadsgaaaagqqqqqqqnqqqn"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    hash = (R*hash +s.charAt(i)) % M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Horner 算法是以英国数学家 William George Horner 命名的一种多项式求值的快速算法，实际上，这种快速算法在他之前就已经被Paolo Ruffini使用过了。而中国数学家秦九韶提出这种算法要比William George Horner 早600多年。</p>
<p><img src="https://raw.githubusercontent.com/MXDC/images_bed/master/img/1567099032709.jpg" alt="1567099032709"></p>
</blockquote>
<h2 id="基于拉链法的散列表"><a href="#基于拉链法的散列表" class="headerlink" title="基于拉链法的散列表"></a>基于拉链法的散列表</h2><p>一种碰撞处理的方法就是将大小为M的数组中的没过元素指向一个链表，链表中的每个节点都储存该元素的<strong>键值对</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithms</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/面向对象设计原则</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h5 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则(DIP)"></a>依赖倒置原则(DIP)</h5><p><strong>依赖反转原则</strong>（Dependency inversion principle，DIP）是指一种特定的<a href="https://zh.wikipedia.org/wiki/耦合性_(計算機科學)" target="_blank" rel="noopener">解耦</a>（传统的<a href="https://zh.wikipedia.org/wiki/耦合性_(計算機科學)" target="_blank" rel="noopener">依赖</a>关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，<strong>使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</strong></p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTBeNbO00GdCqHUS/root/content" alt="依赖倒置"></p>
<p><strong>图1中，高层对象A依赖于底层对象B的实现；图2中，把高层对象A对底层对象的需求抽象为一个接口A，底层对象B实现了接口A，这就是依赖反转。</strong></p>
<p>该原则规定：</p>
<ol>
<li>高层次的模块(稳定)不应该依赖于低层次的模块(<strong>低层实现细节是变化的</strong>)，两者都应该依赖于<a href="https://zh.wikipedia.org/wiki/抽象化_(計算機科學)" target="_blank" rel="noopener">抽象接口</a>。(稳定)</li>
<li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。</li>
</ol>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTfOWbQr--Rw72Lv/root/content" alt="依赖图"></p>
<blockquote>
<p>具体实现时变化的，如果高层次模块模块或者抽象模块依赖于具体实现，系统就会变的不稳定。依赖倒置原则可以把实现细节隔离。</p>
</blockquote>
<h5 id="开放封闭原则（OCP）"><a href="#开放封闭原则（OCP）" class="headerlink" title="开放封闭原则（OCP）"></a>开放封闭原则（OCP）</h5><ul>
<li>对扩展开放，对更改封闭。</li>
<li>类模块应该是可扩展的，但是不可修改。</li>
</ul>
<h5 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h5><p><strong>单一功能(职责)原则</strong>（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。</p>
<ul>
<li>一个类应该仅有一个引起它变化的原因。</li>
<li>变化的方向隐含着类的责任。</li>
</ul>
<h5 id="Liskov-替换原则-LSP"><a href="#Liskov-替换原则-LSP" class="headerlink" title="Liskov 替换原则(LSP)"></a>Liskov 替换原则(LSP)</h5><ul>
<li>子类必须能够替换它们的基类(IS-A)。</li>
<li>继承表达类型抽象。</li>
</ul>
<h5 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则(ISP)"></a>接口隔离原则(ISP)</h5><p><strong>接口隔离原则</strong>（英语：interface-segregation principles， 缩写：ISP）指明客户（client）应该不依赖于它不使用的方法。接口隔离原则(ISP)拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为<strong>角色接口</strong>（role interfaces）。接口隔离原则(ISP)的目的是系统解开耦合，从而容易重构，更改和重新部署。</p>
<ul>
<li>不应该强迫客户程序依赖它们不用的方法。</li>
<li>接口应该小而完备。</li>
</ul>
<blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/程序设计" target="_blank" rel="noopener">程序设计</a>领域， <strong>SOLID</strong>（<strong>单一功能、开闭原则、里氏替换、接口隔离</strong>以及<strong>依赖反转</strong>）是由<a href="https://zh.wikipedia.org/w/index.php?title=Robert_C._Martin&action=edit&redlink=1" target="_blank" rel="noopener">罗伯特·C·马丁</a>在21世纪早期<a href="https://zh.wikipedia.org/wiki/SOLID_(面向对象设计)#cite_note-metz-presentation-2009-1" target="_blank" rel="noopener">[1]</a> 引入的<a href="https://zh.wikipedia.org/wiki/记忆术" target="_blank" rel="noopener">记忆术</a><a href="https://zh.wikipedia.org/wiki/首字母缩略字" target="_blank" rel="noopener">首字母缩略字</a><a href="https://zh.wikipedia.org/wiki/SOLID_(面向对象设计)#cite_note-ub-old-web-solid-2" target="_blank" rel="noopener">[2]</a><a href="https://zh.wikipedia.org/wiki/SOLID_(面向对象设计)#cite_note-ub-solid-3" target="_blank" rel="noopener">[3]</a>，指代了<a href="https://zh.wikipedia.org/wiki/面向对象编程" target="_blank" rel="noopener">面向对象编程</a>和<a href="https://zh.wikipedia.org/wiki/面向对象设计" target="_blank" rel="noopener">面向对象设计</a>的五个基本原则。</p>
</blockquote>
<h5 id="组合-聚合复用原则（Composite-Aggregate-Reuse-Principle-CARP）"><a href="#组合-聚合复用原则（Composite-Aggregate-Reuse-Principle-CARP）" class="headerlink" title="组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）"></a>组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）</h5><p>优先使用对象组合，而不是类继承</p>
<ul>
<li><p>类继承通常为“白箱复用”，对象组合通常为“黑箱复用” 。</p>
</li>
<li><p>继承在某种程度上破坏了封装性，子类父类耦合度高。</p>
</li>
<li><p>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</p>
</li>
</ul>
<hr>
<ol>
<li>封装变化点</li>
</ol>
<ul>
<li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li>
</ul>
<ol start="2">
<li>针对接口编程，而不是针对实现编程</li>
</ol>
<ul>
<li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</li>
<li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li>
<li>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”的类型设计方案。</li>
</ul>
<hr>
<p>将设计原则提升为设计经验</p>
<ol>
<li><p>设计习语 Design Idioms</p>
<p>Design Idioms 描述与特定编程语言相关的低层模式，技巧、惯用法</p>
</li>
<li><p>设计模式 Design pattern</p>
<p>Design pattern 主要描述的是类与相互通信的对象之间的组织关系，包括它们的角色、职责、协作方式等</p>
</li>
<li><p>架构模式 Architectural pattern</p>
<p>Architectural pattern描述的是系统中与基本机构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们自己的关系的规则</p>
</li>
</ol>
<blockquote>
<p>重构获得模式</p>
</blockquote>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/什么是设计模式</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h5 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h5><p><em>Christopher</em> Alexander 说过：“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动”。</p>
<h5 id="深入理解面向对象"><a href="#深入理解面向对象" class="headerlink" title="深入理解面向对象"></a>深入理解面向对象</h5><ul>
<li><p>向下：深入理解面向对象机制</p>
<ul>
<li>封装，隐藏内部实现</li>
<li>继承，复用现有代码</li>
<li>多态，改写对象行为</li>
</ul>
</li>
<li><p>向上：深刻把握面向对象机制所带来的抽象意义，如何使用这种机制来表达现实世界</p>
</li>
</ul>
<h5 id="如何解决决复杂性"><a href="#如何解决决复杂性" class="headerlink" title="如何解决决复杂性"></a>如何解决决复杂性</h5><ul>
<li>分解（不易复用）</li>
<li>抽象（可以使用同一 方法复用）</li>
</ul>
<p>以下分类来自<a href="http://design-patterns.readthedocs.org/zh_CN/latest/index.html" target="_blank" rel="noopener">图说设计模式</a></p>
<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p>
<p>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p>
<p><strong>包含模式</strong>(6种)</p>
<ul>
<li><p>简单工厂模式（Simple Factory）</p>
<p>  重要程度：4 （5为满分）</p>
</li>
<li><p>工厂方法模式（Factory Method）</p>
<p>  重要程度：5</p>
</li>
<li><p>抽象工厂模式（Abstract Factory）</p>
<p>  重要程度：5</p>
</li>
<li><p>建造者模式（Builder）</p>
<p>  重要程度：2</p>
</li>
<li><p>原型模式（Prototype）</p>
<p>  重要程度：3</p>
</li>
<li><p>单例模式（Singleton）</p>
<p>  重要程度：4</p>
</li>
</ul>
<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>结构型模式(Structural Pattern)描述如何将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。</p>
<p>结构型模式可以分为类结构型模式和对象结构型模式：</p>
<ul>
<li>类结构型模式关心类的组合，由多个类可以组合成一个更大的</li>
</ul>
<p>系统，在类结构型模式中一般只存在继承关系和实现关系。 - 对象结构型模式关心类与对象的组合，通过关联关系使得在一 个类中定义另一个类的实例对象，然后通过该对象调用其方法。 根据“合成复用原则”，在系统中尽量使用关联关系来替代继 承关系，因此大部分结构型模式都是对象结构型模式。</p>
<p><strong>包含模式</strong>(7种)</p>
<ul>
<li><p>适配器模式(Adapter)</p>
<p>  重要程度：4</p>
</li>
<li><p>桥接模式(Bridge)</p>
<p>  重要程度：3</p>
</li>
<li><p>组合模式(Composite)</p>
<p>  重要程度：4</p>
</li>
<li><p>装饰模式(Decorator)</p>
<p>  重要程度：3</p>
</li>
<li><p>外观模式(Facade)</p>
<p>  重要程度：5</p>
</li>
<li><p>享元模式(Flyweight)</p>
<p>  重要程度：1</p>
</li>
<li><p>代理模式(Proxy)</p>
<p>  重要程度：4</p>
</li>
</ul>
<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p>行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。</p>
<p>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p>
<p>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</p>
<p>行为型模式分为类行为型模式和对象行为型模式两种：</p>
<ul>
<li>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li>
<li>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。</li>
</ul>
<p><strong>包含模式</strong>(11种)</p>
<ul>
<li><p>职责链模式(Chain of Responsibility)</p>
<p>重要程度：3</p>
</li>
<li><p>命令模式(Command)</p>
<p>重要程度：4</p>
</li>
<li><p>解释器模式(Interpreter)</p>
<p>重要程度：1</p>
</li>
<li><p>迭代器模式(Iterator)</p>
<p>重要程度：5</p>
</li>
<li><p>中介者模式(Mediator)</p>
<p>重要程度：2</p>
</li>
<li><p>备忘录模式(Memento)</p>
<p>  重要程度：2</p>
</li>
<li><p>观察者模式(Observer)</p>
<p>  重要程度：5</p>
</li>
<li><p>状态模式(State)</p>
<p>  重要程度：3</p>
</li>
<li><p>策略模式(Strategy)</p>
<p>  重要程度：4</p>
</li>
<li><p>模板方法模式(Template Method)</p>
<p>  重要程度：3</p>
</li>
<li><p>访问者模式(Visitor)</p>
<p>  重要程度：1</p>
</li>
</ul>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/UML</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h5 id="依赖关系（Dependency）"><a href="#依赖关系（Dependency）" class="headerlink" title="依赖关系（Dependency）"></a>依赖关系（Dependency）</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMzAyMTkzMzIyMjUw?x-oss-process=image/format,png" alt></p>
<p>表示一个类对不在其实例作用域内的另一个类或对象的引用，通常有以下几种情况的依赖：</p>
<ol>
<li>局部变量</li>
<li>方法的参数或返回值</li>
<li>静态方法的调用</li>
</ol>
<h5 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系(Association)"></a>关联关系(Association)</h5><p>表示一个类持有另一个类或对象，是一种 “has-a” 关系，通常表现为：(Worker has Task)</p>
<ol>
<li><p>字段</p>
</li>
<li><p>属性</p>
<p><img src="https://img-blog.csdnimg.cn/20181127213855605.png" alt></p>
</li>
</ol>
<h5 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h5><h5 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h5><p>组合是整体和部分的关系，但是整体和部分不可分离</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Head head;<span class="comment">//组合，不可分离</span></span><br><span class="line">    <span class="keyword">private</span> IDcard idCard; <span class="comment">//聚合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h5><p><img src="https://img-blog.csdnimg.cn/20181127213803746.png" alt></p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p><img src="https://img-blog.csdnimg.cn/20181127213413278.png" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20181127213438552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyb25fWWU=,size_16,color_FFFFFF,t_70" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20181127213455173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyb25fWWU=,size_16,color_FFFFFF,t_70" alt></p>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/Template Method</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Template%20Method/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul>
<li>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</li>
<li>如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</li>
</ul>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义一个操作中的算法的骨架 <strong>(稳定)</strong> ，而将一些步骤延迟 <strong>(变化)</strong> 到子类中。 Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override 重写)该算法的 某些特定步骤。 ——《 设计模式》 GoF</p>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/Strategy</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Strategy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><h4 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h4><ul>
<li>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。</li>
</ul>
<ul>
<li>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂；而且有时候支持不使用的算法也是一个性能负担。</li>
<li>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</li>
</ul>
<ul>
<li>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</li>
</ul>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/Singleton Pattern</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Singleton%20Pattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul>
<li>一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID（序号）生成器。</li>
<li>如何保证一个类只有一个实例并且这个实例易于被访问呢？</li>
<li><strong>一个更好的解决办法是让类自身负责保存它的唯一实例。</strong>这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</li>
</ul>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>单例模式(Singleton Pattern)：单例模式确保某一个类<strong>只有一个实例</strong>，而且<strong>自行实例化</strong>并向整个系统<strong>提供这个实例</strong>，这个类称为单例类，它提供全局访问的方法。</p>
<p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。 </p>
<h2 id="单列模式种实现方式"><a href="#单列模式种实现方式" class="headerlink" title="单列模式种实现方式"></a>单列模式种实现方式</h2><p>1）饿汉式（静态常量）<br>2）饿汉式（静态代码块）<br>3）懒汉式（线程不安全）<br>4）懒汉式（线程安全，同步方法，）<br>5）懒汉式（线程安全，同步代码块，不能实现）<br>6）双重检查<br>7）静态内部类<br>8）枚举</p>
<ol>
<li><p><strong>饿汉式(静态常量)应用实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 2. 实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton()</span><br><span class="line">    <span class="comment">// 3. 对外提供一个公有的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：写法简单，类加载时就实例化，没有多线程同步问题。</p>
<p>缺点：没有Lazy Loading效果，可能会浪费空间</p>
</li>
<li><p><strong>饿汉式(静态代码块)应用实例</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">static</span> &#123;singleton = <span class="keyword">new</span> Singletion() &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 3. 对外提供一个公有的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优缺点同上。</p>
<ol start="3">
<li><p><strong>懒汉式（线程不安全）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 3. 对外提供一个公有的静态方法，用到时才实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单线程可以使用，多线程不安全（多个线程进入if代码块会生成多个实例），开发不要使用。</p>
</li>
<li><p><strong>懒汉式（同步方法）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 3. 对外提供一个公有的静态方法，用到时才实例化,</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">         <span class="comment">// 同步代码块</span></span><br><span class="line">            <span class="comment">// synchronized (Singleton.class)&#123;singleton = new Singleton();&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法进行同步效率低(后面获取实例都要进行同步)，</p>
</li>
<li><p>双重检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 3. 对外提供一个公有的静态方法，用到时才实例化,</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐使用，实现懒加载。线程安全</p>
</li>
<li><p>静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 外部类加载内部类不会加载，实现懒加载</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> class <span class="title">SingletonInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 3. 对外提供一个公有的静态方法，用到时才实例化,</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以防止反序列化，线程安全</p>
</li>
</ol>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/Prototype Pattern</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Prototype%20Pattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a>原型模式（Prototype Pattern）</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><p>克隆羊问题</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>spring 中bena的scope为prototype</p>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>clone是浅拷贝</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul>
<li><p>重写clone方法，对引用类型单独处理</p>
</li>
<li><p>序列化，工具类的对象必须要实现Serializable接口，否则是没有办法实现克隆的。</p>
</li>
<li><p>使用第三方jar包转化为json数据，在转为对象</p>
</li>
<li><p>Apache Commons Lang序列化</p>
</li>
<li><pre><code class="java"> <span class="comment">//写入字节流</span>
ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();
ObjectOutputStream obs = <span class="keyword">new</span>   ObjectOutputStream(out);
obs.writeObject(obj);
obs.close();

<span class="comment">//分配内存，写入原始对象，生成新对象</span>
 ByteArrayInputStream ios = <span class="keyword">new</span>  ByteArrayInputStream(out.toByteArray());
 ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(ios);
<span class="comment">//返回生成的新对象</span>
cloneObj = (T) ois.readObject();
ois.close();</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/Factory Pattern</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Factory%20Pattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="Simple-Factory"><a href="#Simple-Factory" class="headerlink" title="Simple Factory"></a>Simple Factory</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/SimpleFactory.jpg" alt></p>
<ul>
<li><p>简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例</p>
</li>
<li><p>简单工厂又叫静态工厂</p>
</li>
<li><p>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。（封装实例化代码）</p>
</li>
</ul>
<h1 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h1><h2 id="动机（Motivation）-1"><a href="#动机（Motivation）-1" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><p>  在工厂类定义一个抽象方法，将具体产品的创建过程交给专门的工厂子类去完成。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类</p>
<h2 id="结构模式"><a href="#结构模式" class="headerlink" title="结构模式"></a>结构模式</h2><p>工厂方法模式包含如下角色：</p>
<ul>
<li><p>Product：抽象产品</p>
</li>
<li><p>ConcreteProduct：具体产品</p>
</li>
<li><p>Factory：抽象工厂</p>
</li>
<li><p>ConcreteFactory：具体工厂</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTbPGsGrUoYtNWUD/root/content" alt></p>
</li>
</ul>
<h2 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h2><p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTgU3thdrq7tiNTp/root/content" alt="ew"></p>
<ul>
<li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li>
</ul>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>在很多软件系统中需要更换界面主题，要求界面中的按钮、文本框、背景色等一起发生改变时，可以使用抽象工厂模式进行设计。</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgTQizNzUFvXA6PBc/root/content" alt="ss"></p>
]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>23种设计模式/Builder Pattern</title>
    <url>/blog/2020/04/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Builder%20Pattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>23种设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>vim-learn</title>
    <url>/blog/2020/04/29/vim-learn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h3 id="ctrl-c-Es"><a href="#ctrl-c-Es" class="headerlink" title="ctrl + c === Es"></a>ctrl + c === Es</h3><h3 id="改键位"><a href="#改键位" class="headerlink" title="改键位"></a>改键位</h3><p>× 进入家目录。<br>× 进入.vim文件夹，如果没有则创建.vim文件夹。<br>× 创建vimrc文件。<br>× noremap 更改键位命令。</p>
<blockquote>
<p>eg: <code>noremap a b</code> 用a替换b。当你按a时，vim会认为你按了b。</p>
</blockquote>
<h4 id="更改常用键"><a href="#更改常用键" class="headerlink" title="更改常用键"></a>更改常用键</h4><ul>
<li>vim原先 h j k l 分别对于 左下上右 可以通过 norempa更改</li>
<li>norempa i k</li>
<li>noremap k j</li>
<li>noremap j h</li>
<li>noremap <h4 id="命令快捷键"><a href="#命令快捷键" class="headerlink" title="命令快捷键"></a>命令快捷键</h4></li>
<li>map S :w<CR>  # 用大写S替换:w回车(<CR>),快速保存。</CR></CR></li>
<li>map s <nop> # 小写s，不执行指令。</nop></li>
<li>map Q :q<CR> #大写Q，替换:q回车，快速退出。</CR></li>
<li>map R :source $HOME/.vim/vimrc, 重新加载vimrc配置文件当前文件。<h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><operation> <motion></motion></operation></li>
<li>a 删除：d3l-d是删除操作 3是删除字符数 l是删除的方向,dd是剪切整行，p是粘贴</li>
<li>G 文尾行。</li>
<li>o 新建一行 大写前，小写后</li>
<li>y 是复制</li>
<li>p 是粘贴 大写前,小写后。</li>
<li>c 是 change 修该,cw修改一个词，ciw–(change in word) 在单词中修改。ci””–在引号中修改。di””</li>
<li>x 是删除。</li>
<li>w 下一个单词，b上一个单词。 </li>
<li>u 是撤销操作。</li>
<li>J 合并两行。 </li>
<li>f 查找。可以跟 d y结合使用。</li>
<li>/字符串全文查找。:noh取消高亮。<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4>github上的 vim-plug是插件管理软件。</li>
</ul>
<h4 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h4><pre><code>可视化模式有三种。
* v-line ,按shit+v.选完行后可以输入:normal A.png(所选中的行后面都加.png) 指令进行按行批量操作。:normal Kstring。K是在前面添加</code></pre>]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/blog/2020/04/29/test/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><p>testv1</p>
]]></content>
  </entry>
  <entry>
    <title>README</title>
    <url>/blog/2020/04/29/README/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="md"><a href="#md" class="headerlink" title="md"></a>md</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>md</p>
<h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><p>软件架构说明</p>
<h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><ol>
<li>xxxx</li>
<li>xxxx</li>
<li>xxxx</li>
</ol>
<h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><ol>
<li>xxxx</li>
<li>xxxx</li>
<li>xxxx</li>
</ol>
<h4 id="Jenkins使用说明"><a href="#Jenkins使用说明" class="headerlink" title="Jenkins使用说明"></a>Jenkins使用说明</h4><ol>
<li></li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Install using the repository</title>
    <url>/blog/2020/04/29/Install%20using%20the%20repository/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE<br>即企业版，强调安全，付费使用，支持周期 24 个月。</p>
<p>Docker CE 分为 stable, test, 和 nightly 三个更新频道。每六个月发布一个 stable<br>版本 (18.09, 19.03, 19.09…)。</p>
<blockquote>
<p>The Docker Engine - Community package is now called <code>docker-ce</code>.</p>
</blockquote>
<h4 id="Centos-安装docker-ce"><a href="#Centos-安装docker-ce" class="headerlink" title="Centos 安装docker-ce"></a><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Centos 安装docker-ce</a></h4><p>You can install Docker Engine - Community in different ways, depending on your needs:</p>
<ul>
<li>Most users <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository" target="_blank" rel="noopener">set up Docker’s repositories</a> and install from them, for ease of installation and upgrade tasks. <strong>This is the recommended approach.</strong></li>
<li>Some users download the RPM package and <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-from-a-package" target="_blank" rel="noopener">install it manually</a> and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet.</li>
<li>In testing and development environments, some users choose to use automated <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script" target="_blank" rel="noopener">convenience scripts</a> to install Docker.</li>
</ul>
<h3 id="Install-using-the-repository"><a href="#Install-using-the-repository" class="headerlink" title="Install using the repository"></a>Install using the repository</h3><p>Before you install Docker Engine - Community for the first time on a new host machine, *<em>you need to set up the Docker repository. *</em>Afterward, you can install and update Docker from the repository.</p>
<h4 id="SET-UP-THE-REPOSITORY"><a href="#SET-UP-THE-REPOSITORY" class="headerlink" title="SET UP THE REPOSITORY"></a>SET UP THE REPOSITORY</h4><ol>
<li><p>Install required packages. <code>yum-utils</code> pro<em>v</em>ides the <code>yum-config-manager</code> utility, and <code>device-mapper-persistent-data</code> and <code>lvm2</code> are required by the <code>devicemapper</code> storage driver.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use the following command to set up the <strong>stable</strong> repository.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">--add-repo \</span><br><span class="line">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ sudo yum-config-manager \</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --add-repo \</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="INSTALL-DOCKER-ENGINE-COMMUNITY"><a href="#INSTALL-DOCKER-ENGINE-COMMUNITY" class="headerlink" title="INSTALL DOCKER ENGINE - COMMUNITY"></a>INSTALL DOCKER ENGINE - COMMUNITY</h4><ol>
<li><p>Install the <em>latest version</em> of Docker Engine - Community and containerd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Start-Docker"><a href="#Start-Docker" class="headerlink" title="Start Docker."></a>Start Docker.</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 Docker CE</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Hexo搭建个人博客</title>
    <url>/blog/2020/04/28/Hexo-Next-Blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\blog\assets\js\Meting.min.js"></script><h1 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h1><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>首先根据<a href="https://hexo.io" target="_blank" rel="noopener">Hexo官方文档</a>安装<code>hexo</code>。<code>hexo</code>可以全局安装，也可以局部安装。安装好<code>hexo</code>后进行以下操作初始化项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/** hexo会在指定的文件夹中创建项目 */</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;youfolder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;youfolder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>

<p>查看文件目录结构如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_drafts</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">_posts</span></span><br><span class="line"><span class="string">└──</span> <span class="string">themes</span></span><br><span class="line"></span><br><span class="line"><span class="string">/**</span></span><br><span class="line">  <span class="string">_config.yml</span> <span class="string">是站点配置文件。</span></span><br><span class="line">  <span class="string">pacakge.json</span> <span class="string">是项目和依赖包信息。</span></span><br><span class="line">  <span class="string">scaffolds</span> <span class="string">是模板文件夹，新建文章使用的模板。</span></span><br><span class="line">  <span class="string">source/_posts</span> <span class="string">是存放Markdown文章的目录。</span></span><br><span class="line">  <span class="string">themes</span> <span class="string">是主题文件夹。</span></span><br><span class="line"> <span class="string">*/</span></span><br></pre></td></tr></table></figure>

<p>更新依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/** 更新全局依赖 */</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm update -g</span></span><br><span class="line"></span><br><span class="line">/** 更新项目依赖,在包含package.json</span><br><span class="line">的文件夹目录下面执行 */</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm update</span></span><br></pre></td></tr></table></figure>

<p>项目运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 本地启动服务器 *&#x2F;</span><br><span class="line">$  hexo server</span><br><span class="line">&#x2F;** 参数</span><br><span class="line"> *  -p,--port,默认4000</span><br><span class="line"> *  -s,--static,只使用静态文件</span><br><span class="line"> *  -l,--log,启用日志记录</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>下载主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/** 进入你的项目目录 */</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span>  &lt;youfolder&gt;</span></span><br><span class="line"></span><br><span class="line">/** 在github上找到你要的主题 */</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next  themes/next</span></span><br><span class="line"></span><br><span class="line">/** 更新主题 */</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/next</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br></pre></td></tr></table></figure>

<p>主题配置</p>
<p>下载完主题后修改<code>_config.yml</code>文件中的<code>theme：</code>为你的主题</p>
<h2 id="自定义效果"><a href="#自定义效果" class="headerlink" title="自定义效果"></a>自定义效果</h2><ol>
<li>右上角GitHub Logo</li>
</ol>
<p>可以通过修改next主题配置文件添加github banner。</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">/**</span> <span class="string">themes\next\_config.yml</span>  <span class="string">*/</span></span><br><span class="line"><span class="attr">github_baner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>网站<a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">github-ribbons</a>和<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">github-corners</a>有github corner样式。<br>可以将样式复制到next主题对应的位置。位置可以通过查找<code>_config.yml</code>文件的配置文件关键词进行定位<br>实现效果如下所示:</p>
<p><img src="https://api.onedrive.com/v1.0/shares/s!AnfzhZ6EzsFXgUINwX8KysBXdEER/root/content" alt="github banner"></p>
<ol start="2">
<li>添加RSS</li>
</ol>
<p><code>hexo-generator-feed</code>是<code>hexo</code>的一个RSS插件。执行以下命令安装插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Next-Theme</tag>
      </tags>
  </entry>
</search>
